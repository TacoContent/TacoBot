{
	// VS Code tasks for TacoBot
	"$schema": "vscode://schemas/tasks",
	"version": "2.0.0",
	"tasks": [
		{
			"label": "TacoBot: Start Local Bot",
			"type": "shell",
			"command": "./.venv/scripts/Activate.ps1; python ${workspaceFolder}/main.py",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated"
			},
			"problemMatcher": [
				"$python"
			],
			"group": {
				"kind": "build",
				"isDefault": true
			},
			"detail": "Start the TacoBot locally for development"
		},
		{
			"label": "Python: Activate Virtual Environment",
			"type": "shell",
			"command": "./.venv/scripts/Activate.ps1",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated"
			},
			"problemMatcher": [],
			"group": {
				"kind": "none",
				"isDefault": false
			},
			"detail": "Activate the Python virtual environment for the workspace"
		},
		{
			"label": "Python: Run Tests",
			"type": "shell",
			"command": "./.venv/scripts/Activate.ps1; python -m pytest tests/",
			"options": {
				"env": {
					"PYTHONPATH": "${workspaceFolder}/bot"
				}
			},
			"presentation": {
				"reveal": "always",
				"panel": "dedicated"
			},
			"problemMatcher": [
				"$python"
			],
			"group": {
				"kind": "test",
				"isDefault": true
			},
			"detail": "Run all tests with standard output"
		},
		{
			"label": "Python: Run Tests (Verbose)",
			"type": "shell",
			"command": "./.venv/scripts/Activate.ps1; python -m pytest tests/ -v --tb=long",
			"options": {
				"env": {
					"PYTHONPATH": "${workspaceFolder}/bot"
				}
			},
			"presentation": {
				"reveal": "always",
				"panel": "dedicated"
			},
			"problemMatcher": [
				"$python"
			],
			"group": {
				"kind": "test"
			},
			"detail": "Run all tests with verbose output and full tracebacks"
		},
		{
			"label": "Python: Run Tests (Fast)",
			"type": "shell",
			"command": "./.venv/scripts/Activate.ps1; python -m pytest tests/ -q --disable-warnings",
			"options": {
				"env": {
					"PYTHONPATH": "${workspaceFolder}/bot"
				}
			},
			"presentation": {
				"reveal": "always",
				"panel": "dedicated"
			},
			"problemMatcher": [
				"$python"
			],
			"group": {
				"kind": "test"
			},
			"detail": "Run tests quickly, only showing pass/fail summary"
		},
		{
			"label": "Python: Run Tests (Coverage)",
			"type": "shell",
			"command": "./.venv/scripts/Activate.ps1; python -m pytest tests/ --cov=bot --cov=httpserver --cov=metrics --cov=scripts --cov-config=.coveragerc --cov-report=html --cov-report=xml --cov-report=json --cov-report=term-missing",
			"options": {
				"env": {
					"PYTHONPATH": "${workspaceFolder}/bot"
				}
			},
			"presentation": {
				"reveal": "always",
				"panel": "dedicated"
			},
			"problemMatcher": [
				"$python"
			],
			"group": {
				"kind": "test"
			},
			"detail": "Run tests with coverage reports (HTML, XML, JSON)"
		},
		{
			"label": "Python: Coverage Markdown Report",
			"type": "shell",
			"command": "./.venv/scripts/Activate.ps1; python -m pytest --cov=bot --cov=httpserver --cov=metrics --cov=scripts --cov-config=.coveragerc --cov-report=term-missing tests/; python -m coverage report --format=markdown > reports/pytest/coverage.md",
			"options": {
				"env": {
					"PYTHONPATH": "${workspaceFolder}/bot"
				}
			},
			"presentation": {
				"reveal": "always",
				"panel": "dedicated"
			},
			"problemMatcher": [
				"$python"
			],
			"group": {
				"kind": "test",
				"isDefault": false
			},
			"detail": "Run all tests and output a markdown coverage report to reports/coverage.md"
		},
		{
			"label": "Format Check (Black)",
			"type": "shell",
			"command": "./.venv/scripts/Activate.ps1; python -m black --config .github/linters/.python-black .",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated"
			}
		},
		{
			"label": "Format (iSort)",
			"type": "shell",
			"command": "./.venv/scripts/Activate.ps1; python -m isort --settings-path .github/linters/.isort.cfg .",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated"
			}
		},
		{
			"label": "Lint (Super Linter)",
			"type": "shell",
			"command": "docker run --rm --env-file .github/env/super-linter.env -e RUN_LOCAL=true -e CREATE_LOG_FILE=true -e LOG_FILE=reports/super-linter/super-linter-summary.ansi.log -e DEFAULT_BRANCH=develop -e GITHUB_WORKSPACE=/github/workspace -v ${workspaceFolder}:/github/workspace ghcr.io/super-linter/super-linter:v8",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated"
			},
			"detail": "Run GitHub Super-Linter locally against the repository using Docker"
		},
		{
			"label": "Swagger Validation Quiet",
			"type": "shell",
			"command": "./.venv/scripts/Activate.ps1; python scripts/swagger_sync.py --config=.github/linters/.swagger-sync.yaml --env=quiet",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated"
			},
			"problemMatcher": [],
			"detail": "Validate the OpenAPI (Swagger) specification file"
		},
		{
			"label": "Swagger Validation",
			"type": "shell",
			"command": "./.venv/scripts/Activate.ps1; python scripts/swagger_sync.py --config=.github/linters/.swagger-sync.yaml --env=local",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated"
			},
			"problemMatcher": [],
			"detail": "Validate the OpenAPI (Swagger) specification file"
		},
		{
			"label": "Swagger FIX",
			"type": "shell",
			"command": "./.venv/scripts/Activate.ps1; python scripts/swagger_sync.py --fix --config=.github/linters/.swagger-sync.yaml --env=local",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated"
			},
			"problemMatcher": [],
			"detail": "Fix the OpenAPI (Swagger) specification file"
		}
	]
}