[
  {
    "id": "8e8be37b4873bbc5",
    "type": "tab",
    "label": "SHiFT CODES",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "9e05f6f7663a0f1f",
    "type": "status",
    "z": "8e8be37b4873bbc5",
    "name": "MONGODB CONNECTED",
    "scope": ["19c6feea444709fb"],
    "x": 130,
    "y": 480,
    "wires": [["ead9d7f3ab96aaf0"]]
  },
  {
    "id": "19c6feea444709fb",
    "type": "mongodb in",
    "z": "8e8be37b4873bbc5",
    "mongodb": "cca90e0ad48e5446",
    "name": "Find SHiFT Code",
    "collection": "shift_codes",
    "operation": "find",
    "x": 570,
    "y": 400,
    "wires": [[]]
  },
  {
    "id": "f15eec9b1e3849bc",
    "type": "function",
    "z": "8e8be37b4873bbc5",
    "name": "Find Query",
    "func": "msg.collection = \"shift_codes\";\nmsg.entry = msg.payload;\n\nif (msg.entry === null) { \n  msg.payload = {\n    \"game_id\": \"NONE\",\n    \"code\": \"NONE\"\n  }\n  return msg;\n}\n\nmsg.payload = {\n    \"game_id\": msg.entry.game_id,\n    \"code\": msg.entry.code\n};\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 370,
    "y": 400,
    "wires": [["19c6feea444709fb"]]
  },
  {
    "id": "c01a74894606f8b2",
    "type": "http request",
    "z": "8e8be37b4873bbc5",
    "name": "SHiFTCodesTK GET",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://shiftcodestk.com/assets/php/scripts/shift/getCodes?gameID=bl3&order=default&filter=&limit=10&offset=0&hash=false",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": true,
    "headers": [],
    "x": 300,
    "y": 260,
    "wires": [["c3158434f4eb399e"]]
  },
  {
    "id": "c3158434f4eb399e",
    "type": "function",
    "z": "8e8be37b4873bbc5",
    "name": "function 5",
    "func": "\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 520,
    "y": 260,
    "wires": [[]]
  },
  {
    "id": "4f22373f98f8a248",
    "type": "inject",
    "z": "8e8be37b4873bbc5",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 100,
    "y": 260,
    "wires": [["c01a74894606f8b2"]]
  },
  {
    "id": "fec1e8c8b218c74f",
    "type": "debug",
    "z": "8e8be37b4873bbc5",
    "name": "SHiFTCodeTK",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1000,
    "y": 260,
    "wires": []
  },
  {
    "id": "90e8e79263f0e783",
    "type": "catch",
    "z": "8e8be37b4873bbc5",
    "name": "",
    "scope": ["c01a74894606f8b2"],
    "uncaught": false,
    "x": 750,
    "y": 200,
    "wires": [["fec1e8c8b218c74f"]]
  },
  {
    "id": "198fbfbb6d4367e9",
    "type": "switch",
    "z": "8e8be37b4873bbc5",
    "name": "",
    "property": "payload",
    "propertyType": "msg",
    "rules": [
      {
        "t": "nempty"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 810,
    "y": 260,
    "wires": [["fec1e8c8b218c74f"]]
  },
  {
    "id": "4f1c63a4642184d3",
    "type": "http request",
    "z": "8e8be37b4873bbc5",
    "name": "BSky Gearbox SHiFT Codes",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": true,
    "headers": [],
    "x": 680,
    "y": 540,
    "wires": [["f4dde3d75b951186"]]
  },
  {
    "id": "7f40f23e3fe04f5d",
    "type": "function",
    "z": "8e8be37b4873bbc5",
    "name": "Process GBSC Post",
    "func": "/***\n * Process GBSC Post\n ***/\n\nconst KNOWN_GAMES = [\n  {\n    \"id\": \"bl0\",\n    \"name\": \"Borderlands: The Pre-Sequel\",\n    \"regex\": /(?:Borderlands: The Pre-Sequel|BL:?TPS)/gi,\n    \"platforms\": [\"Steam\", \"Epic\", \"XBOX\", \"PSN\", \"Switch\"]\n  },\n  {\n    \"id\": \"bl1goty\",\n    \"name\": \"Borderlands: Game of the Year Edition\",\n    \"regex\": /(?:Borderlands(?:\\: Game of the Year(?:\\sEdition)?)?(?! 2| 3| 4|: The Pre-Sequel)|BL(?:[\\:]?GOTY)?(?!\\:?2|\\:?3|\\:?TPS))/gi,\n    \"platforms\": [\"Steam\", \"Epic\", \"XBOX\", \"PSN\", \"Switch\"]\n  },\n  {\n    \"id\": \"bl2\",\n    \"name\": \"Borderlands 2\",\n    \"regex\": /(?:Borderlands 2|BL[\\:]?2)/gi,\n    \"platforms\": [\"Steam\", \"Epic\", \"XBOX\", \"PSN\", \"Switch\"]\n  },\n  {\n    \"id\": \"bl3\",\n    \"name\": \"Borderlands 3\",\n    \"regex\": /(?:Borderlands 3|BL[\\:]?3)/gi,\n    \"platforms\": [\"Steam\", \"Epic\", \"XBOX\", \"PSN\", \"Switch\"]\n  },\n  {\n    \"id\": \"bl4\",\n    \"name\": \"Borderlands 4\",\n    \"regex\": /(?:Borderlands 4|BL[\\:]?4)/gi,\n    \"platforms\": [\"Steam\", \"Epic\", \"XBOX\", \"PSN\", \"Switch\"]\n  },\n  {\n    \"id\": \"ttw\",\n    \"name\": \"Tiny Tina's Wonderlands\",\n    // Match both straight and curly apostrophes\n    \"regex\": /(?:Tiny Tina['â€™]s Wonderlands|TTW[L]?)/gi,\n    \"platforms\": [\"Steam\", \"Epic\", \"XBOX\", \"PSN\"]\n  }\n];\n\nfunction toUnixTimestamp(dateStr) {\n  if (!dateStr) return null;\n  // Accepts YYYY-MM-DD only\n  const m = /^(\\d{4})-(\\d{2})-(\\d{2})$/.exec(dateStr.trim());\n  if (!m) return null;\n  return Math.floor(new Date(`${m[1]}-${m[2]}-${m[3]}T00:00:00Z`).getTime() / 1000);\n}\n\nfunction cleanGame(title) {\n  for (let game of KNOWN_GAMES) {\n    if (game.regex.test(title)) {\n      return { id: game.id, name: game.name };\n    }\n  }\n  return null;\n}\n\nfunction getPlatformsForGameId(gameId) {\n  const game = KNOWN_GAMES.find(g => g.id === gameId);\n  return game ? game.platforms : [];\n}\n\nfunction getAllPlatforms(games) {\n  const platformSet = new Set();\n  for (let game of games) {\n    const platforms = getPlatformsForGameId(game.id);\n    for (let p of platforms) {\n      platformSet.add(p);\n    }\n  }\n  return Array.from(platformSet);\n}\n\nfunction allGames() {\n  return KNOWN_GAMES.map(game => {\n    return { id: game.id, name: game.name.trim() };\n  });\n}\n\nfunction getPostId(uri) {\n  // \"uri\": \"at://did:plc:sden5674t33reyexxna44ytg/app.bsky.feed.post/3lyls2ptkbk2q\",\n  const match = uri.match(/\\/app\\.bsky\\.feed\\.post\\/([^/]+)/);\n  return match ? match[1] : null;\n}\n\nlet post = msg.payload.post;\n\nif (!post || !post.record || !post.record.text) {\n  msg.data = msg.payload;\n  msg.payload = \"Unexpected Payload\";\n  throw \"Unexpected Payload\";\n}\n\n// Example inputs separated by -----\n/*\nT9RJB-BFKRR-3RBTW-B33TB-KCZB9\nlet results = [];\n1 golden key for Borderlands 4 ðŸŽ‰\n\nExpiry unknown\n-----\nZRR3T-56WRJ-JBBTB-TJBJT-XZF3X\n\nGolden keys/skeleton keys for Borderlands, Borderlands 2, Borderlands: The Pre-Sequel, Borderlands 3 and Tiny Tinaâ€™s Wonderlands\n\nExpires 2025-09-11\n-----\nWHWJB-XH3SX-39CZW-H3BBB-BTF55\n\n1 golden key for Borderlands 4.\n\nUnknown expiry\n-----\nWHKJJ-SXJHR-39CS5-9JJBT-595B9\n\n5 golden keys for Borderlands, Borderlands 2, Borderlands: The Pre-Sequel and Borderlands 3, plus a diamond key for Borderlands 3\n-----\nHRFTJ-XBB63-33T33-TB3JB-H5W59\n\n3 golden/skeleton keys\nBL, BL2, BL:TPS, BL3, TTWL\n-----\nHX63J-9JT63-BJBTB-TB333-RZXFW\n\n3 golden keys for BL, BL2, BLTPS, BL3 and TTWL\n*/\n\nlet input = post.record.text;\nlet source = null;\nlet postId = getPostId(post.uri);\nif (postId) {\n  source = `https://bsky.app/profile/shift.jedillama.social/post/${postId}`;\n}\n\nlet regex = /(?<code>(?:[A-Z0-9]{5}-){4}[A-Z0-9]{5})\\s*\\n+(?<reward>.*?(for\\s|\\n)(?<games>.+?))\\s*(?:\\n+(?:Expires\\s(?<expiry>\\d{4}-\\d{2}-\\d{2}))?|$)/gim;\n\ncreated = post.record.createdAt ? toUnixTimestamp(post.record.createdAt.split(\"T\")[0]) : Math.floor(Date.now() / 1000);\n\nlet result = null;\nlet match = regex.exec(input);\nif (match !== null) {\n  let games = match.groups.games\n    ? match.groups.games.split(/\\s*,\\s*|\\s+and\\s+/).map(s => s.trim()).filter(Boolean)\n    : [];\n\n  // Map to game objects, filter out nulls, and remove duplicates by id\n  let mappedGames = games.map(cleanGame).filter(Boolean);\n  let uniqueGames = [];\n  let seenIds = new Set();\n  for (let g of mappedGames) {\n    if (!seenIds.has(g.id)) {\n      uniqueGames.push(g);\n      seenIds.add(g.id);\n    }\n  }\n\n  if (uniqueGames.length === 0) {\n    uniqueGames = allGames();\n  }\n\n  result = {\n    code: match.groups.code.trim().toUpperCase().replace(/ /g, \"\"),\n    games: uniqueGames,\n    platforms: getAllPlatforms(uniqueGames),\n    source: source,\n    source_id: \"bsky-gbsc-nodered\",\n    notes: `Posted by ${post.author.displayName} (@${post.author.handle}) on Bluesky`,\n    reward: match.groups.reward.trim(),\n    created_at: created,\n    expiry: toUnixTimestamp(match.groups.expiry) || null\n  };\n}\n\nmsg.payload = result;\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 760,
    "y": 580,
    "wires": [["ebdd82449a9cf6a6"]]
  },
  {
    "id": "5b2266ced1c77e1c",
    "type": "debug",
    "z": "8e8be37b4873bbc5",
    "name": "BSKY GBSC",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1050,
    "y": 520,
    "wires": []
  },
  {
    "id": "f4dde3d75b951186",
    "type": "function",
    "z": "8e8be37b4873bbc5",
    "name": "Get Feed Data",
    "func": "msg.payload = msg.payload.feed;\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 440,
    "y": 580,
    "wires": [["a4e91a7644a7e84f"]]
  },
  {
    "id": "6cb0323db0287a3f",
    "type": "catch",
    "z": "8e8be37b4873bbc5",
    "name": "BSKY",
    "scope": [
      "4f1c63a4642184d3",
      "7f40f23e3fe04f5d",
      "9c65f55040fa9ba8",
      "2b265ed90e9e6e04",
      "1d8189ead225c42c",
      "a4e91a7644a7e84f",
      "fed4acdd83e29777",
      "53fc06026b55ae4a",
      "83d05038cd2766ad",
      "c6c8750a11e3d080",
      "dbf2ab85fe3c052a",
      "9db0c84a3fec763e",
      "5e997484b62b01f5",
      "513be826c29ea342",
      "4e7658d49513aa94",
      "c813973cd56a1a75",
      "f4dde3d75b951186"
    ],
    "uncaught": false,
    "x": 910,
    "y": 520,
    "wires": [["5b2266ced1c77e1c"]]
  },
  {
    "id": "a4e91a7644a7e84f",
    "type": "split",
    "z": "8e8be37b4873bbc5",
    "name": "",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "property": "payload",
    "x": 590,
    "y": 580,
    "wires": [["7f40f23e3fe04f5d"]]
  },
  {
    "id": "83d05038cd2766ad",
    "type": "http request",
    "z": "8e8be37b4873bbc5",
    "name": "POST SHiFT CODE",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": true,
    "headers": [
      {
        "keyType": "other",
        "keyValue": "X-TACOBOT-TOKEN",
        "valueType": "other",
        "valueValue": "xxxxxxxxxxxxxxxxxxxxxxxxxxxx"
      }
    ],
    "x": 840,
    "y": 1000,
    "wires": [["5e997484b62b01f5"]]
  },
  {
    "id": "2b265ed90e9e6e04",
    "type": "inject",
    "z": "8e8be37b4873bbc5",
    "name": "BETA Manual Trigger",
    "props": [
      {
        "p": "globals.post_url",
        "v": "http://bane.bit13.local:8931/webhook/shift",
        "vt": "str"
      },
      {
        "p": "globals.limit",
        "v": "10",
        "vt": "num"
      },
      {
        "p": "globals.actor",
        "v": "shift.jedillama.social",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 140,
    "y": 520,
    "wires": [["9aec425708b7c181"]]
  },
  {
    "id": "9c65f55040fa9ba8",
    "type": "inject",
    "z": "8e8be37b4873bbc5",
    "name": "PRODUCTION Manual Trigger",
    "props": [
      {
        "p": "globals.post_url",
        "v": "http://lb.bit13.local:8931/webhook/shift",
        "vt": "str"
      },
      {
        "p": "globals.limit",
        "v": "10",
        "vt": "num"
      },
      {
        "p": "globals.actor",
        "v": "shift.jedillama.social",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 170,
    "y": 560,
    "wires": [["9aec425708b7c181"]]
  },
  {
    "id": "fed4acdd83e29777",
    "type": "function",
    "z": "8e8be37b4873bbc5",
    "name": "Find Untracked Query",
    "func": "msg.collection = \"shift_codes\";\n\nif (!msg.globals.guild_id) {\n    msg.payload = \"Missing Guild ID\";\n    throw \"Missing Guild ID\";\n}\n\nmsg.sort = {\n    \"created_at\": -1\n};\n\nmsg.payload = {\n    \"tracked_in\": {\n        \"$not\": {\n            \"$elemMatch\": {\n                \"guild_id\": msg.globals.guild_id.toString()\n            }\n        }\n    }\n};\n\nif (msg.globals.limit) {\n    msg.limit = msg.globals.limit;\n}\n\nif (msg.globals.skip) {\n    msg.skip = msg.globals.skip;\n}\n\nif (msg.globals.sort) {\n    msg.sort = msg.globals.sort;\n}\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 440,
    "y": 760,
    "wires": [["c6c8750a11e3d080"]]
  },
  {
    "id": "c6c8750a11e3d080",
    "type": "mongodb in",
    "z": "8e8be37b4873bbc5",
    "mongodb": "cca90e0ad48e5446",
    "name": "Find SHiFT Code",
    "collection": "shift_codes",
    "operation": "find",
    "x": 650,
    "y": 760,
    "wires": [["c813973cd56a1a75", "153ae1911537dd64"]]
  },
  {
    "id": "c813973cd56a1a75",
    "type": "switch",
    "z": "8e8be37b4873bbc5",
    "name": "Filter Found SHiFT CODE",
    "property": "payload",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "null",
        "vt": "jsonata"
      },
      {
        "t": "neq",
        "v": "null",
        "vt": "jsonata"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 870,
    "y": 760,
    "wires": [["93abba26fa38a85c"], ["d9043ac30d64f0bf"]]
  },
  {
    "id": "5e997484b62b01f5",
    "type": "function",
    "z": "8e8be37b4873bbc5",
    "name": "Process Response",
    "func": "if (msg.payload.error) {\n    msg.payload = null;\n    return msg;\n}\n\nif (msg.payload === '') {\n    msg.payload = null;\n    return msg;\n}\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 330,
    "y": 1040,
    "wires": [["513be826c29ea342"]]
  },
  {
    "id": "513be826c29ea342",
    "type": "switch",
    "z": "8e8be37b4873bbc5",
    "name": "Ignore Empty Payload",
    "property": "payload",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "null",
        "vt": "jsonata"
      },
      {
        "t": "neq",
        "v": "null",
        "vt": "jsonata"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 540,
    "y": 1040,
    "wires": [["1f424bd7749e8767"], ["5fde5a774b839fe8"]]
  },
  {
    "id": "93abba26fa38a85c",
    "type": "debug",
    "z": "8e8be37b4873bbc5",
    "name": "IGNORE EXISTING",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "entry",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1120,
    "y": 720,
    "wires": []
  },
  {
    "id": "5fde5a774b839fe8",
    "type": "debug",
    "z": "8e8be37b4873bbc5",
    "name": "NEW CODE",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 810,
    "y": 1080,
    "wires": []
  },
  {
    "id": "46d3f865c7445634",
    "type": "inject",
    "z": "8e8be37b4873bbc5",
    "name": "PRODUCTION Manual Trigger",
    "props": [
      {
        "p": "globals.post_url",
        "v": "http://lb.bit13.local:8931/webhook/shift",
        "vt": "str"
      },
      {
        "p": "globals.guild_id",
        "v": "935294040386183228",
        "vt": "str"
      },
      {
        "p": "globals.limit",
        "v": "1",
        "vt": "num"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 170,
    "y": 740,
    "wires": [[]]
  },
  {
    "id": "4d9e98d3960c9a03",
    "type": "inject",
    "z": "8e8be37b4873bbc5",
    "name": "BETA Manual Trigger",
    "props": [
      {
        "p": "globals.post_url",
        "v": "http://bane.bit13.local:8931/webhook/shift",
        "vt": "str"
      },
      {
        "p": "globals.guild_id",
        "v": "942532970613473293",
        "vt": "str"
      },
      {
        "p": "globals.limit",
        "v": "1",
        "vt": "num"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 140,
    "y": 700,
    "wires": [["fed4acdd83e29777"]]
  },
  {
    "id": "b4356c496bd7b33f",
    "type": "link in",
    "z": "8e8be37b4873bbc5",
    "name": "[LINK IN] POST SHIFT CODE",
    "links": ["e20f0f9c1c7cd966", "a7e2e78bc230667d"],
    "x": 45,
    "y": 960,
    "wires": [["a45a52753eb27363"]]
  },
  {
    "id": "2f026cf0f953952d",
    "type": "function",
    "z": "8e8be37b4873bbc5",
    "name": "Global Set BSGBSC_POST_URL",
    "func": "if (!msg.globals.post_url) {\n    msg.globals.post_url = \"http://lb.bit13.local:8931/webhook/shift\";\n}\n\nglobal.set(\"BSGBSC_POST_URL\", msg.globals.post_url);\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 380,
    "y": 1000,
    "wires": [["c5ef021ce5259e19", "ebb7be67125a3831"]]
  },
  {
    "id": "c5ef021ce5259e19",
    "type": "function",
    "z": "8e8be37b4873bbc5",
    "name": "Set Post Url",
    "func": "var post_url = global.get(\"BSGBSC_POST_URL\");\nmsg.url = post_url;\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 630,
    "y": 1000,
    "wires": [["83d05038cd2766ad", "ebb7be67125a3831"]]
  },
  {
    "id": "e20f0f9c1c7cd966",
    "type": "link out",
    "z": "8e8be37b4873bbc5",
    "name": "[LINK OUT] POST BSGBSC SHIFT CODE",
    "mode": "link",
    "links": ["b4356c496bd7b33f"],
    "x": 1075,
    "y": 580,
    "wires": []
  },
  {
    "id": "1f424bd7749e8767",
    "type": "debug",
    "z": "8e8be37b4873bbc5",
    "name": "IGNORE EXISTING",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "entry",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 840,
    "y": 1040,
    "wires": []
  },
  {
    "id": "5165028ed7a033e1",
    "type": "debug",
    "z": "8e8be37b4873bbc5",
    "name": "UNTRACKED",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 540,
    "y": 860,
    "wires": []
  },
  {
    "id": "153ae1911537dd64",
    "type": "debug",
    "z": "8e8be37b4873bbc5",
    "name": "DEBUG UNTRACKED",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 820,
    "y": 660,
    "wires": []
  },
  {
    "id": "ebb7be67125a3831",
    "type": "debug",
    "z": "8e8be37b4873bbc5",
    "name": "debug 1",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 700,
    "y": 920,
    "wires": []
  },
  {
    "id": "9aec425708b7c181",
    "type": "function",
    "z": "8e8be37b4873bbc5",
    "name": "Set Source URL",
    "func": "let actor = msg.globals.actor ? msg.globals.actor : \"shift.jedillama.social\";\nlet limit = msg.globals.limit ? msg.globals.limit : 1;\n\nlet post_url = `https://public.api.bsky.app/xrpc/app.bsky.feed.getAuthorFeed?filter=posts_no_replies&actor=${actor}&limit=${limit}`\n\nmsg.url = post_url;\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 440,
    "y": 540,
    "wires": [["4f1c63a4642184d3"]]
  },
  {
    "id": "ead9d7f3ab96aaf0",
    "type": "trigger",
    "z": "8e8be37b4873bbc5",
    "name": "1 HOUR",
    "op1": "{\"globals\":{\"post_url\":\"http://lb.bit13.local:8931/webhook/shift\",\"limit\":10,\"actor\":\"shift.jedillama.social\"}}",
    "op2": "0",
    "op1type": "json",
    "op2type": "str",
    "duration": "-60",
    "extend": false,
    "overrideDelay": false,
    "units": "min",
    "reset": "",
    "bytopic": "all",
    "topic": "topic",
    "outputs": 1,
    "x": 320,
    "y": 480,
    "wires": [["f8ba0a1587700947"]]
  },
  {
    "id": "f8ba0a1587700947",
    "type": "function",
    "z": "8e8be37b4873bbc5",
    "name": "FIX PAYLOAD",
    "func": "msg = msg.payload;\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 480,
    "y": 480,
    "wires": [["494579796c6636d2"]]
  },
  {
    "id": "494579796c6636d2",
    "type": "debug",
    "z": "8e8be37b4873bbc5",
    "name": "MSG DUMP",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 650,
    "y": 480,
    "wires": []
  },
  {
    "id": "d9043ac30d64f0bf",
    "type": "split",
    "z": "8e8be37b4873bbc5",
    "name": "",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "property": "payload",
    "x": 390,
    "y": 800,
    "wires": [["5165028ed7a033e1", "b5d3f838cd595c33"]]
  },
  {
    "id": "a7e2e78bc230667d",
    "type": "link out",
    "z": "8e8be37b4873bbc5",
    "name": "[LINK OUT] BACKFILL SHIFT CODE",
    "mode": "link",
    "links": ["b4356c496bd7b33f"],
    "x": 735,
    "y": 800,
    "wires": []
  },
  {
    "id": "b5d3f838cd595c33",
    "type": "function",
    "z": "8e8be37b4873bbc5",
    "name": "Format Payload",
    "func": "\ndelete msg.payload._id;\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 580,
    "y": 800,
    "wires": [["a7e2e78bc230667d"]]
  },
  {
    "id": "ebdd82449a9cf6a6",
    "type": "delay",
    "z": "8e8be37b4873bbc5",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "10",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "5",
    "randomLast": "20",
    "randomUnits": "seconds",
    "drop": false,
    "allowrate": false,
    "outputs": 1,
    "x": 960,
    "y": 580,
    "wires": [["e20f0f9c1c7cd966"]]
  },
  {
    "id": "a45a52753eb27363",
    "type": "delay",
    "z": "8e8be37b4873bbc5",
    "name": "",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "3",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "5",
    "randomLast": "20",
    "randomUnits": "seconds",
    "drop": false,
    "allowrate": false,
    "outputs": 1,
    "x": 150,
    "y": 960,
    "wires": [["2f026cf0f953952d"]]
  },
  {
    "id": "cca90e0ad48e5446",
    "type": "mongodb",
    "hostname": "andeddu.bit13.local",
    "topology": "direct",
    "connectOptions": "authSource=admin",
    "port": "27017",
    "db": "tacobot",
    "name": "Tacobot"
  },
  {
    "id": "0bc7f89fedc16400",
    "type": "global-config",
    "env": [],
    "modules": {
      "node-red-node-mongodb": "0.2.5"
    }
  }
]
