openapi: 3.0.1
info:
  title: TacoBot
  description: "Multi-Purpose Discord Bot with Minecraft, Twitch, and other integrations for the TACO community."
  version: "1.0.0-snapshot"
  contact:
    name: TacoBot
    url: "https://discord.gg/aQ37F2EcjF"
servers:
  - url: '{host}'
    variables:
      host:
        enum:
          - 'http://localhost:8931'
          - 'http://lb.bit13.local:8931'
        default: 'http://lb.bit13.local:8931'
paths:
  '/api/v1/swagger.yaml':
    get:
      tags:
        - swagger
      summary: Get the swagger file
      description: |
        Gets the swagger file
      parameters: []
      responses:
        "200":
          description: Successful operation
          content:
            application/yaml:
              schema:
                type: string

  '/swagger.yaml':
    get:
      tags:
        - swagger
      summary: Get the swagger file
      description: |
        Gets the swagger file
      parameters: []
      responses:
        "200":
          description: Successful operation
          content:
            application/yaml:
              schema:
                type: string

  '/api/v1/health':
    get:
      tags:
        - health
      summary: Get the health status of the service
      description: |
        Gets the health status of the service
      parameters: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok

  '/api/v1/guilds':
    get:
      tags:
        - guilds
      summary: Get the list of guilds the bot is in
      description: |
        Gets the list of guilds the bot is in
      parameters: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string

  '/api/v1/guilds/lookup/{guild_id}':
    get:
      tags:
        - guilds
      summary: Lookup a guild
      description: |
        Retrieves details for a single guild by its ID.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordGuild'
        "404":
          description: Guild not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'

  '/api/v1/guilds/lookup/batch/{guild_ids}':
    get:
      tags:
        - guilds
      summary: Get the guild information for multiple guilds
      description: |
        Gets the guild information for multiple guilds
      parameters:
        - name: guild_ids
          description: Comma separated list of guild IDs
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/DiscordGuild"
        "404":
          description: Guild not found
          content:
            application/json:
              schema:
                "$ref": '#/components/schemas/ErrorStatusCodePayload'

  '/api/v1/guilds/lookup/batch':
    get:
      tags:
        - guilds
      summary: Get the guild information for multiple guilds
      description: |
        Gets the guild information for multiple guilds
      parameters:
        - name: guild_ids
          description: Comma separated list of guild IDs
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/DiscordGuild"
        "404":
          description: Guild not found
          content:
            application/json:
              schema:
                "$ref": '#/components/schemas/ErrorStatusCodePayload'
    post:
      tags:
        - guilds
      summary: Get the guild information for multiple guilds
      description: |
        Gets the guild information for multiple guilds
      parameters:
        - name: guild_ids
          description: Comma separated list of guild IDs
          in: query
          schema:
            type: array
            items:
              type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/DiscordGuild"
        "404":
          description: Guild not found
          content:
            application/json:
              schema:
                "$ref": '#/components/schemas/ErrorStatusCodePayload'

  '/api/v1/guild/{guild_id}/categories':
    get:
      tags: [ guilds, channels ]
      summary: List guild categories (with channels)
      description: Returns all channel categories in the guild. Each category object embeds its child channels.
      parameters:
        - name: guild_id
          in: path
          required: true
          description: Discord guild (server) ID
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordCategory'
        "404":
          description: Guild not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorStatusCodePayload' }

  '/api/v1/guild/{guild_id}/category/{category_id}':
    get:
      tags: [ guilds, channels ]
      summary: Get category (with channels)
      description: Returns a single category and its child channels.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema: { type: string }
        - name: category_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/DiscordCategory' }
        "404":
          description: Guild or category not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorStatusCodePayload' }

  '/api/v1/guild/{guild_id}/channels':
    get:
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
      tags: [ guilds, channels ]
      summary: List top-level guild channels
      description: Returns channels that are not within a category. Use categories endpoint for nested channels.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/DiscordChannel' }
        "404":
          description: Guild not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorStatusCodePayload' }

  '/api/v1/guild/{guild_id}/channels/batch/ids':
    post:
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
      tags: [ guilds, channels ]
      summary: Batch fetch channels by IDs
      description: Retrieve multiple channels. Accepts array body or object with ids property; can also accept repeated query param ids.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema: { type: string }
        - name: ids
          in: query
          required: false
          description: Repeatable channel ID query parameter
          schema: { type: array, items: { type: string } }
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items: { type: string }
                - type: object
                  properties:
                    ids:
                      type: array
                      items: { type: string }
                  required: [ ids ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/DiscordChannel' }
        "404":
          description: Guild not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorStatusCodePayload' }

  '/api/v1/guild/{guild_id}/channel/{channel_id}/messages':
    get:
      tags: [ guilds, channels, messages ]
      summary: List recent messages in a channel
      description: Returns up to the most recent 100 messages (default 50) for the specified text channel.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema: { type: string }
        - name: channel_id
          in: path
          required: true
          schema: { type: string }
        - name: limit
          in: query
          required: false
          schema: { type: integer, minimum: 1, maximum: 100, default: 50 }
          description: Max number of most recent messages to return (1-100, default 50)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/DiscordMessage' }
        "400":
          description: Invalid guild/channel id or channel unsupported
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorStatusCodePayload' }
        "404":
          description: Guild or channel not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorStatusCodePayload' }

  '/api/v1/guild/{guild_id}/channel/{channel_id}/message/{message_id}':
    get:
      tags: [ guilds, channels, messages ]
      summary: Get a single message
      description: Fetch a single message by its ID.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema: { type: string }
        - name: channel_id
          in: path
          required: true
          schema: { type: string }
        - name: message_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/DiscordMessage' }
        "400":
          description: Invalid ids
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorStatusCodePayload' }
        "404":
          description: Guild, channel, or message not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorStatusCodePayload' }

  '/api/v1/guild/{guild_id}/channel/{channel_id}/messages/batch/ids':
    post:
      tags: [ guilds, channels, messages ]
      summary: Batch fetch messages by IDs
      description: Retrieve multiple messages. Accepts an array body or object with ids property; can also accept repeated query param ids.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema: { type: string }
        - name: channel_id
          in: path
          required: true
          schema: { type: string }
        - name: ids
          in: query
          required: false
          schema: { type: array, items: { type: string } }
          description: Repeatable message ID query parameter
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items: { type: string }
                - type: object
                  properties:
                    ids:
                      type: array
                      items: { type: string }
                  required: [ ids ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/DiscordMessage' }
        "400":
          description: Invalid ids or malformed body
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorStatusCodePayload' }
        "404":
          description: Guild or channel not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorStatusCodePayload' }

  '/api/v1/guild/{guild_id}/emojis':
    get:
      tags:
        - guilds
        - emojis
      summary: Get the list of emojis for a guild
      description: |
        Returns all custom emojis for the specified guild.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordEmoji'
        "400":
          description: Invalid guild id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        "404":
          description: Guild not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'

  '/api/v1/guild/{guild_id}/emoji/id/{emoji_id}':
    get:
      tags:
        - guilds
        - emojis
      summary: Get an emoji by ID
      description: |
        Returns a single emoji object for the given emoji ID.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema:
            type: string
        - name: emoji_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordEmoji'
        "400":
          description: Invalid guild or emoji id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        "404":
          description: Guild or Emoji not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'

  '/api/v1/guild/{guild_id}/emoji/name/{emoji_name}':
    get:
      tags:
        - guilds
        - emojis
      summary: Get an emoji by name
      description: |
        Returns a single emoji object for the given emoji name.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema:
            type: string
        - name: emoji_name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordEmoji'
        "400":
          description: Invalid guild id or emoji name missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        "404":
          description: Guild or Emoji not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'

  '/api/v1/guild/{guild_id}/emojis/ids/batch':
    post:
      tags:
        - guilds
        - emojis
      summary: Get a batch of emojis by their IDs
      description: |
        Accepts either an array of emoji IDs as the JSON body or an object with an `ids` array field. Query parameter `ids` may also be provided multiple times.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema:
            type: string
        - name: ids
          in: query
          required: false
          description: Repeatable query parameter of emoji ids
          schema:
            type: array
            items:
              type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    type: string
                - type: object
                  properties:
                    ids:
                      type: array
                      items:
                        type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordEmoji'
        "400":
          description: Invalid guild id or malformed body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        "404":
          description: Guild not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'

  '/api/v1/guild/{guild_id}/emojis/names/batch':
    post:
      tags:
        - guilds
        - emojis
      summary: Get a batch of emojis by their names
      description: |
        Accepts either an array of emoji names as the JSON body or an object with a `names` array field. Query parameter `names` may also be provided multiple times.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema:
            type: string
        - name: names
          in: query
          required: false
          description: Repeatable query parameter of emoji names
          schema:
            type: array
            items:
              type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    type: string
                - type: object
                  properties:
                    names:
                      type: array
                      items:
                        type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordEmoji'
        "400":
          description: Invalid guild id or malformed body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        "404":
          description: Guild not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'

  '/api/v1/guild/{guild_id}/roles':
    get:
      tags: [ guilds, roles ]
      summary: List guild roles
      parameters:
        - name: guild_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { type: array, items: { $ref: '#/components/schemas/DiscordRole' } }
        "404":
          description: Guild not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorStatusCodePayload' }

  '/api/v1/guild/{guild_id}/roles/batch/ids':
    post:
      tags: [ guilds, roles ]
      summary: Batch fetch roles by IDs
      parameters:
        - name: guild_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items: { type: string }
                - type: object
                  properties:
                    ids:
                      type: array
                      items: { type: string }
                  required: [ ids ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { type: array, items: { $ref: '#/components/schemas/DiscordRole' } }
        "404":
          description: Guild not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorStatusCodePayload' }

  '/api/v1/guild/{guild_id}/join-whitelist':
    get:
      tags: [ guilds, whitelist ]
      summary: List all join whitelist entries
      description: Returns the complete join whitelist for the guild. For large lists, prefer the paginated endpoint.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/JoinWhitelistUser' }
        "400":
          description: Invalid guild id
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorStatusCodePayload' }
    post:
      tags: [ guilds, whitelist ]
      summary: Add (upsert) a user to join whitelist
      description: |
        Provide JSON body: { "user_id": "<id>", "added_by": "<id>" }

        The "added_by" field is optional and defaults to the same value as "user_id" when omitted.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id: { type: string }
                added_by: { type: string }
              required: [ user_id ]
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/JoinWhitelistUser' }
        "400":
          description: Invalid input
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorStatusCodePayload' }

  '/api/v1/guild/{guild_id}/join-whitelist/page':
    get:
      tags: [ guilds, whitelist ]
      summary: List paginated join whitelist entries
      description: Returns a page of join whitelist entries. Accepts query params skip (default 0) and take (default 50, max 200).
      parameters:
        - name: guild_id
          in: path
          required: true
          schema: { type: string }
        - name: skip
          in: query
          required: false
          schema: { type: integer, minimum: 0, default: 0 }
        - name: take
          in: query
          required: false
          schema: { type: integer, minimum: 1, maximum: 200, default: 50 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedResults' }
        "400":
          description: Invalid pagination parameters
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorStatusCodePayload' }

  '/api/v1/guild/{guild_id}/join-whitelist/{user_id}':
    put:
      tags: [ guilds, whitelist ]
      summary: Update (re-add) a join whitelist entry
      description: |
        Upserts a specific user.

        Optional body example:
          { "added_by": "<id>" }
      parameters:
        - name: guild_id
          in: path
          required: true
          schema: { type: string }
        - name: user_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                added_by: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/JoinWhitelistUser' }
        "400":
          description: Invalid input
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorStatusCodePayload' }
    delete:
      tags: [ guilds, whitelist ]
      summary: Delete a join whitelist entry
      description: Removes a user from the whitelist.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema: { type: string }
        - name: user_id
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: No Content (deleted)
        "400":
          description: Invalid input
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorStatusCodePayload' }

  '/api/v1/guild/{guild_id}/mentionables/batch/ids':
    post:
      tags: [ guilds, mentionables ]
      summary: Batch fetch mentionables (roles or users) by IDs
      description: Returns role and/or user payloads for provided IDs. Accepts array or object with ids property.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items: { type: string }
                - type: object
                  properties:
                    ids:
                      type: array
                      items: { type: string }
                  required: [ ids ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/DiscordMentionable' }
        "404":
          description: Guild not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorStatusCodePayload' }

  '/api/v1/minecraft/whitelist.json':
    get:
      tags:
        - minecraft
      summary: Get the whitelist JSON
      description: |
        Gets JSON formatted whitelist configuration
      parameters: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MinecraftWhiteListUser"

  '/api/v1/minecraft/ops.json':
    get:
      tags:
        - minecraft
      summary: Get the ops list JSON
      description: |
        Gets JSON formatted OPS configuration
      parameters: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MinecraftOpUser"

  '/api/v1/minecraft/uuid/{username}':
    get:
      tags:
        - minecraft
      summary: Get userid from username
      description: |
        Gets JSON payload of userid from username
      parameters:
        - name: username
          description: Minecraft username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": '#/components/schemas/MinecraftUser'
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": '#/components/schemas/ErrorStatusCodePayload'

  '/api/v1/minecraft/status':
    get:
      tags:
        - minecraft
      summary: Get the server status information
      description: |
        Gets information on the server.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MinecraftServerStatus"

  '/api/v1/minecraft/version':
    get:
      tags:
        - minecraft
      summary: Get the minecraft server version information
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TacoMinecraftServerSettings"
    post:
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
      tags:
        - minecraft
      summary: Set the minecraft server version information
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TacoMinecraftServerSettings"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TacoMinecraftServerSettings"

  '/api/v1/minecraft/player/{user}/stats':
    get:
      parameters:
        - name: user
          description: The users minecraft username
          in: path
          required: true
          schema:
            type: string
      tags:
        - minecraft
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MinecraftDiscordUserStatsInfo"
    post:
      parameters:
        - name: user
          description: The users minecraft uuid
          in: path
          required: true
          schema:
            type: string
      tags:
        - minecraft
      responses:
        "200":
          description: Successful operation
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MinecraftUserStatsPayload"

  '/api/v1/minecraft/player/{username}/stats/{world}':
    parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      - name: world
        in: path
        required: true
        schema:
          "$ref": "#/components/schemas/TacoMinecraftWorlds"
    get:
      tags:
        - minecraft
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MinecraftDiscordUserStatsInfo"

  '/api/v1/minecraft/world':
    get:
      tags:
        - minecraft
      summary: Get the active minecraft server world information
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TacoMinecraftWorldInfo"
    post:
      tags:
        - minecraft
      summary: Set the active minecraft server world
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                guild_id:
                  type: string
                  description: Discord Guild ID
                world:
                  "$ref": "#/components/schemas/TacoMinecraftWorlds"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TacoMinecraftWorldInfo"

  '/api/v1/minecraft/worlds':
    get:
      tags:
        - minecraft
      summary: Get the active minecraft server world information
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/TacoMinecraftWorldInfo"

  '/tacobot/guild/{guild}/invite/{channel}':
    post:
      security:
        - X-AUTH-TOKEN: []
      tags:
        - twitch
      summary: Invite Bot to twitch channel
      description: ''
      parameters:
        - name: guild
          in: path
          description: The GUILD ID
          required: true
          schema:
            type: string
            format: ''
        - name: channel
          in: path
          description: The name of the twitch channel
          required: true
          schema:
            type: string
            format: ''

      responses:
        "200":
          description: Successful operation

  '/api/v1/minecraft/player/events':
    get:
      tags:
        - minecraft
      summary: Get the minecraft player events
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MinecraftPlayerEvent"

  '/api/v1/minecraft/player/event/{event}':
    get:
      tags:
        - minecraft
      summary: Get the minecraft player event
      parameters:
        - name: event
          in: path
          required: true
          description: The event type. Values can be pulled from the /tacobot/minecraft/player/events endpoint
          schema:
            type: string
            enum:
              - login
              - logout
              - death

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MinecraftPlayerEventPayload"

  '/api/v1/permissions/{guildId}/{userId}':
    get:
      tags:
        - permissions
      summary: Get user permissions
      parameters:
        - name: guildId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  '/api/v1/permissions/{guildId}/{userId}/{permission}':
    post:
      tags:
        - permissions
      summary: Add permission to user
      parameters:
        - name: guildId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: permission
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
    put:
      tags:
        - permissions
      summary: Add permission to user
      parameters:
        - name: guildId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: permission
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
    delete:
      tags:
        - permissions
      summary: Remove permission from user
      parameters:
        - name: guildId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: permission
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation

  '/webhook/minecraft/tacos/{action}':
    parameters:
      - name: action
        in: path
        required: true
        description: What action was taken
        schema:
          type: string
          enum:
            - login
            - custom
    post:
      security:
        - X-TACOBOT-TOKEN: []
      tags:
        - webhook
      summary: Minecraft Webhook to give tacos to a user
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TacoWebhookMinecraftTacosPayload"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TacoWebhookMinecraftTacosResponsePayload"
    delete:
      security:
        - X-TACOBOT-TOKEN: []
      tags:
        - webhook
      summary: Minecraft Webhook to remove tacos from a user
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TacoWebhookMinecraftTacosPayload"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TacoWebhookMinecraftTacosResponsePayload"

  '/webhook/minecraft/player/event':
    post:
      security:
        - X-TACOBOT-TOKEN: []
      tags:
        - webhook
      summary: Minecraft Webhook to send player events
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MinecraftPlayerEventPayload"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MinecraftPlayerEventPayload"

  '/webhook/game':
    post:
      security:
        - X-TACOBOT-TOKEN: []
      tags:
        - webhook
      summary: Submit Free Game Webhook
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TacoWebhookGamePayload"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TacoWebhookGamePayload"

  '/webhook/shift':
    post:
      security:
        - X-TACOBOT-TOKEN: []
      tags:
        - webhook
      summary: Submit SHiFT Code Webhook
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ShiftCodePayload"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ShiftCodePayload"

components:
  schemas:
    ErrorStatusCodePayload:
      type: object
      properties:
        error:
          type: string
      example:
        error: "guild not found"
    ShiftCodeGame:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    ShiftCodePayload:
      type: object
      properties:
        code:
          type: string
        games:
          type: array
          items:
            "$ref": "#/components/schemas/ShiftCodeGame"
        platforms:
          type: array
          items:
            type: string
        expiry:
          type: number
        reward:
          type: string
        notes:
          type: string
        source:
          type: string
        created_at:
          type: number
      required:
        - code
    TacoWebhookMinecraftTacosResponsePayload:
      type: object
      properties:
        success:
          type: boolean
        payload:
          "$ref": "#/components/schemas/TacoWebhookMinecraftTacosPayload"
        total_tacos:
          type: integer
    TacoWebhookMinecraftTacosPayload:
      type: object
      properties:
        guild_id:
          type: string
        from_user:
          type: string
        to_user_id:
          type: string
        amount:
          type: integer
        reason:
          type: string
        type:
          type: string
          enum:
            - login
            - custom
    TacoWebhookGamePayload:
      type: object
      properties:
        game_id:
          type: integer
        end_date:
          type: number
        worth:
          type: string
        open_giveaway_url:
          type: string
        title:
          type: string
        thumbnail:
          type: string
        image:
          type: string
        description:
          type: string
        instructions:
          type: string
        published_date:
          type: number
        type:
          type: string
        platforms:
          type: array
          items:
            type: string
        formatted_published_date:
          type: string
        formatted_end_date:
          type: string
    TacoMinecraftWorlds:
      default: taco_atm10
      type: string
      enum:
        - taco_atm8
        - taco_atm9
        - taco_atm10
    TacoMinecraftWorldInfo:
      type: object
      properties:
        world:
          "$ref": "#/components/schemas/TacoMinecraftWorlds"
        name:
          type: string
        active:
          description: Indicates if the world is the active world
          type: boolean
        guild_id:
          description: Discord Guild ID
          type: string
    MinecraftUserStatsPayload:
      type: object
      properties:
        stats:
          "$ref": "#/components/schemas/MinecraftUserStats"
        world_name:
          "$ref": "#/components/schemas/TacoMinecraftWorlds"
    MinecraftUserStats:
      type: object
      properties:
        minecraft:crafted:
          type: object
          properties:
            minecraft:smooth_stone:
              type: integer
        minecraft:broken:
          properties:
            minecraft:stone_pickaxe:
              type: integer
    MinecraftPlayerEvent:
      type: object
      properties:
        event:
          type: string
    MinecraftPlayerEventPayload:
      type: object
      properties:
        event:
          type: string
        guild_id:
          type: string
        payload:
          type: object
          description: The event payload. This can be different depending on the event type
    MinecraftDiscordUserStatsInfo:
      type: object
      properties:
        world:
          "$ref": "#/components/schemas/TacoMinecraftWorlds"
        uuid:
          type: string
        username:
          type: string
        user_id:
          type: string
          description: Discord User ID
        modified:
          type: number
        stats:
          "$ref": "#/components/schemas/MinecraftUserStats"
    MinecraftServerSettings:
      type: object
      properties:
        enabled:
          type: boolean
        output_channel:
          type: string
        server:
          type: string
        forge_version:
          type: string
        version:
          type: string
        help:
          type: string
        mods:
          type: array
          items:
            "$ref": "#/components/schemas/TacoMinecraftServerSettingsMod"
    TacoMinecraftServerSettingsMod:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
    TacoMinecraftServerSettings:
      type: object
      properties:
        guild_id:
          type: string
        name:
          type: string
        settings:
          "$ref": "#/components/schemas/MinecraftServerSettings"
        timestamp:
          type: number
    MinecraftServerStatus:
      type: object
      properties:
        success:
          type: boolean
        host:
          type: string
        status:
          enum:
            - online
            - offline
          type: string
        description:
          type: string
          description: The server description message
        motd:
          type: object
          properties:
            plain:
              type: string
            ansi:
              type: string
            html:
              type: string
            raw:
              type: string
        online:
          type: boolean
          description: Indicates if the server is online
        latency:
          type: number
          description: The latency to the server
        enforces_secure_chat:
          type: boolean
          description: Indicates if the server enforces secure chat
        icon:
          type: string
          description: The server icon data URI
        players:
          type: object
          properties:
            max:
              description: Maximum number of players that can connect
              type: integer
            online:
              description: Total number of players currently connected
              type: integer
        version:
          type: object
          properties:
            name:
              type: string
            protocol:
              type: integer
    MinecraftUser:
      type: object
      properties:
        uuid:
          type: string
        name:
          type: string
    MinecraftOpUser:
      type: object
      properties:
        uuid:
          type: string
        username:
          type: string
        level:
          type: integer
        bypassPlayerLimit:
          type: boolean
    MinecraftWhiteListUser:
      type: object
      properties:
        uuid:
          type: string
        username:
          type: string
      required:
        - uuid
        - username
    DiscordGuild:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        icon:
          type: string
        banner:
          type: string
        description:
          type: string
        member_count:
          type: integer
        features:
          type: array
          items:
            type: string
        owner_id:
          type: string
        vanity_url_code:
          type: string
        vanity_url:
          type: string
        preferred_locale:
          type: string
        verification_level:
          type: string
        boost_level:
          type: integer
        boost_count:
          type: integer
      required:
        - id
        - name
    DiscordGuildChannels:
      type: object
      properties:
        id:
          type: string
          description: The guild ID
        name:
          type: string
          description: The guild name
        channels:
          type: array
          items:
            "$ref": "#/components/schemas/DiscordCategory"
        categories:
          type: array
          items:
            "$ref": "#/components/schemas/DiscordCategory"
    DiscordChannel:
      type: object
      properties:
        id:
          type: string
        guild_id:
          type: string
        name:
          type: string
        type:
          type: string
        position:
          type: integer
        topic:
          type: string
        nsfw:
          type: boolean
        bitrate:
          type: integer
        user_limit:
          type: integer
        category_id:
          type: string
      required:
        - id
        - name
        - type
    DiscordCategory:
      type: object
      properties:
        id:
          type: string
        guild_id:
          type: string
        name:
          type: string
        position:
          type: integer
        type:
          type: string
        category_id:
          type: string
        channels:
          type: array
          items:
            "$ref": "#/components/schemas/DiscordChannel"
    DiscordEmoji:
      type: object
      properties:
        type:
          type: string
          enum: [emoji]
        id:
          type: string
        guild_id:
          type: string
        name:
          type: string
        animated:
          type: boolean
        available:
          type: boolean
        managed:
          type: boolean
        require_colons:
          type: boolean
        created_at:
          type: string
          format: date-time
        url:
          type: string
    DiscordRole:
      type: object
      properties:
        type:
          type: string
          enum: [role]
        id:
          type: string
        guild_id:
          type: string
        name:
          type: string
        color:
          type: integer
          format: int32
          nullable: true
        created_at:
          type: string
          format: date-time
          nullable: true
        display_icon:
          type: string
          nullable: true
        flags:
          type: object
        hoist:
          type: boolean
          nullable: true
        icon:
          type: string
          nullable: true
        managed:
          type: boolean
          nullable: true
        mention:
          type: string
        mentionable:
          type: boolean
          nullable: true
        position:
          type: integer
          nullable: true
        permissions:
          type: integer
          nullable: true
        secondary_color:
          type: integer
          nullable: true
        tertiary_color:
          type: integer
          nullable: true
        unicode_emoji:
          type: string
          nullable: true
    DiscordUser:
      type: object
      properties:
        type:
          type: string
          enum: [user]
        id:
          type: string
        guild_id:
          type: string
        accent_color:
          type: integer
          nullable: true
        avatar:
          type: string
          nullable: true
        banner:
          type: string
          nullable: true
        bot:
          type: boolean
          nullable: true
        color:
          type: integer
          nullable: true
        created_at:
          type: number
          nullable: true
        default_avatar:
          type: string
          nullable: true
        discriminator:
          type: string
          nullable: true
        display_avatar:
          type: string
          nullable: true
        display_name:
          type: string
          nullable: true
        global_name:
          type: string
          nullable: true
        mention:
          type: string
        name:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
        system:
          type: boolean
          nullable: true
        timestamp:
          type: number
          nullable: true
        username:
          type: string
          nullable: true
    DiscordMentionable:
      oneOf:
        - $ref: '#/components/schemas/DiscordRole'
        - $ref: '#/components/schemas/DiscordUser'
    DiscordMessage:
      type: object
      properties:
        type:
          type: string
          enum: [ message ]
        id:
          type: string
        channel_id:
          type: string
        guild_id:
          type: string
        author_id:
          type: string
        content:
          type: string
        created_at:
          type: integer
          description: Epoch timestamp (seconds)
        jump_url:
          type: string
          nullable: true
        edited_at:
          type: integer
        mention_everyone:
          type: boolean
        mentions:
          type: array
          items:
            type: object
            properties:
              id: { type: string }
              username: { type: string }
        attachments:
          type: array
          items:
            type: object
            properties:
              id: { type: string }
              url: { type: string }
        embeds:
          type: array
          items:
            type: object
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/DiscordMessageReaction'
        nonce:
          type: string
          nullable: true
        pinned:
          type: boolean
        message_type:
          type: integer
      required: [ id, channel_id, guild_id, author_id, content, created_at ]
    DiscordMessageReaction:
      type: object
      properties:
        emoji:
          type: string
          description: The emoji (unicode or custom emoji textual representation)
        count:
          type: integer
          description: Reaction count (or aggregated count across queried messages)
    JoinWhitelistUser:
      type: object
      description: Join whitelist entry
      properties:
        guild_id:
          type: string
        user_id:
          type: string
        added_by:
          type: string
          nullable: true
        timestamp:
          type: integer
          nullable: true
          description: Epoch seconds when entry was added
      required: [ guild_id, user_id ]
    PagedResultsJoinWhitelistUser:
      allOf:
        - $ref: '#/components/schemas/PagedResults'
        - properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/JoinWhitelistUser'

    PagedResults:
      type: object
      description: Paginated results.
      properties:
        total:
          type: integer
          description: Total number of matching items (unpaged)
        skip:
          type: integer
          description: Number of items skipped (offset)
        take:
          type: integer
          description: Requested page size
        items:
          type: array
          description: Page slice of items
          items: {}

      required: [ total, skip, take, items ]

  securitySchemes:
    X-AUTH-TOKEN:
      type: apiKey
      description: Authentication Token passed as header
      name: X-AUTH-TOKEN
      in: header
    X-TACOBOT-TOKEN:
      type: apiKey
      description: Authentication Token passed as header
      name: X-TACOBOT-TOKEN
      in: header
security:
  - X-AUTH-TOKEN: []
  - X-TACOBOT-TOKEN: []
