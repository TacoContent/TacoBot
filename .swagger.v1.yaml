openapi: 3.0.1
info:
  title: TacoBot
  description: Multi-Purpose Discord Bot with Minecraft, Twitch, and other integrations for the TACO community.
  version: 1.0.0-snapshot
  contact:
    name: TacoBot
    url: https://discord.gg/aQ37F2EcjF
servers:
  - url: '{host}'
    variables:
      host:
        enum:
          - http://localhost:8931
          - http://lb.bit13.local:8931
        default: http://lb.bit13.local:8931
paths:
  /api/v1/swagger.yaml:
    get:
      tags:
        - swagger
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/yaml:
              schema:
                type: string
      summary: Get the swagger file
      description: Gets the swagger file
  /swagger.yaml:
    get:
      tags:
        - swagger
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/yaml:
              schema:
                type: string
      summary: Get the swagger file
      description: Gets the swagger file
  /api/v1/health:
    get:
      description: Gets the health status of the service
      tags:
        - health
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
      summary: Get the health status of the service
      parameters: []
  /api/v1/guilds:
    get:
      description: List all guilds the bot is currently a member of.
      security:
        - X-API-TOKEN: []
        - X-TACOBOT-TOKEN: []
      tags:
        - guilds
      summary: List Guilds
      responses:
        '200':
          description: Successful guild list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordGuild'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
  /api/v1/guilds/lookup/{guild_id}:
    get:
      security:
        - X-API-TOKEN: []
        - X-TACOBOT-TOKEN: []
      tags:
        - guilds
      responses:
        '200':
          description: Successful guild lookup
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordGuild'
        '400':
          description: Bad request (missing/invalid guild_id)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Guild not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      summary: Guild Lookup
      description: Lookup a single guild by ID.
      parameters:
        - in: path
          required: true
          name: guild_id
          description: The ID of the guild to look up.
          schema:
            type: string
  /api/v1/guilds/lookup/batch/{guild_ids}:
    get:
      description: Lookup multiple guilds by ID.
      security:
        - X-API-TOKEN: []
        - X-TACOBOT-TOKEN: []
      tags:
        - guilds
      summary: Batch Guild Lookup
      responses:
        '200':
          description: Successful batch guild lookup
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordGuild'
        '400':
          description: Bad request (invalid guild IDs)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      parameters:
        - in: path
          required: true
          name: guild_ids
          description: Comma-separated list of guild IDs to look up.
          schema:
            type: string
  /api/v1/guilds/lookup/batch:
    get:
      description: Lookup multiple guilds by ID.
      security: &id001
        - X-API-TOKEN: []
        - X-TACOBOT-TOKEN: []
      tags: &id002
        - guilds
      summary: Batch Guild Lookup
      responses:
        '200':
          description: Successful batch guild lookup
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordGuild'
        '400':
          description: Bad request (invalid guild IDs)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      parameters: &id003
        - in: query
          name: ids
          description: Guild IDs to look up (can be specified multiple times).
          required: false
          schema:
            type: string
    post:
      description: Lookup multiple guilds by ID.
      security: *id001
      tags: *id002
      requestBody:
        description: Request body for batch guild lookup by IDs.
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    type: string
                - $ref: '#/components/schemas/GuildItemIdBatchRequestBody'
      summary: Batch Guild Lookup
      responses:
        '200':
          description: Successful batch guild lookup
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordGuild'
        '400':
          description: Bad request (invalid guild IDs)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      parameters: *id003
  /api/v1/guild/{guild_id}/categories:
    get:
      description: Returns all channel categories in the guild. Each category object embeds its child channels.
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
      tags:
        - guilds
        - channels
      summary: List guild categories (with channels)
      responses:
        '200':
          description: Successful response with list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordCategory'
        '404':
          description: Guild not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      parameters:
        - in: path
          required: true
          name: guild_id
          description: Discord guild (server) ID
          schema:
            type: string
  /api/v1/guild/{guild_id}/category/{category_id}:
    get:
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
      tags:
        - guilds
        - channels
      responses:
        '200':
          description: Successful response with category and its channels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordCategory'
        '404':
          description: Guild or category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '400':
          description: Missing or invalid guild_id or category_id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      summary: Get category (with channels)
      description: Returns a single category and its child channels.
      parameters:
        - in: path
          required: true
          name: guild_id
          description: Discord guild (server) ID
          schema:
            type: string
        - in: path
          required: true
          name: category_id
          description: Discord category channel ID
          schema:
            type: string
  /api/v1/guild/{guild_id}/channels:
    get:
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
      tags:
        - guilds
        - channels
      responses:
        '200':
          description: Successful response with top-level channels and categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordGuildChannels'
        '404':
          description: Guild or category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '400':
          description: Missing or invalid guild_id or category_id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      summary: List top-level guild channels
      description: Returns channels that are not within a category. Use categories endpoint for nested channels.
      parameters:
        - in: path
          required: true
          name: guild_id
          description: Discord guild (server) ID
          schema:
            type: string
  /api/v1/guild/{guild_id}/channels/batch/ids:
    post:
      description: Retrieve multiple channels by their IDs.
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
      tags:
        - guilds
        - channels
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    type: string
                - $ref: '#/components/schemas/GuildItemIdBatchRequestBody'
      summary: Batch fetch channels by IDs
      responses:
        '200':
          description: Successful response with list of channels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordChannel'
        '400':
          description: Missing/invalid guild_id or malformed body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Guild not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      parameters:
        - in: path
          required: true
          name: guild_id
          description: Discord guild (server) ID
          schema:
            type: string
        - in: query
          name: ids
          description: Repeatable channel ID query parameter
          required: false
          schema:
            type: string
  /api/v1/guild/{guild_id}/channel/{channel_id}/messages:
    get:
      description: Returns up to the most recent 100 messages (default 50) for the specified text-capable channel in the guild.
      summary: List recent messages from a text-capable channel
      responses:
        '200':
          description: An array of DiscordMessage objects representing the most recent messages, ordered newest first.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordMessage'
        '400':
          description: Bad Request - Missing/invalid IDs or unsupported channel type / bad limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized - Missing or invalid authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Not Found - Guild or channel not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Internal Server Error - Unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      parameters:
        - in: path
          required: true
          name: guild_id
          description: The ID of the guild containing the channel.
          schema:
            type: string
        - in: path
          required: true
          name: channel_id
          description: The ID of the text-capable channel to retrieve messages from.
          schema:
            type: string
        - in: query
          name: limit
          description: The number of most recent messages to retrieve (1-100, default 50).
          required: false
          schema:
            type: integer
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
      tags:
        - guilds
        - channels
        - messages
  /api/v1/guild/{guild_id}/channel/{channel_id}/message/{message_id}:
    get:
      responses:
        '200':
          description: A DiscordMessage object representing the requested message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordMessage'
        '400':
          description: Bad Request - Missing/invalid IDs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized - Missing or invalid authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Not Found - Guild, channel or message not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Internal Server Error - Unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      tags:
        - guilds
        - channels
        - messages
      parameters:
        - in: path
          required: true
          name: guild_id
          description: The ID of the guild containing the channel.
          schema:
            type: string
        - in: path
          required: true
          name: channel_id
          description: The ID of the text-capable channel containing the message.
          schema:
            type: string
        - in: path
          required: true
          name: message_id
          description: The ID of the message to retrieve.
          schema:
            type: string
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
      summary: Fetch a single message by ID
      description: Returns the specified message from the text-capable channel in the guild.
  /api/v1/guild/{guild_id}/channel/{channel_id}/messages/batch/ids:
    post:
      tags:
        - guilds
        - channels
        - messages
      summary: Batch fetch messages by IDs
      description: Retrieve multiple messages. Accepts an array body or object with ids property; can also accept repeated query param ids.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema:
            type: string
        - name: channel_id
          in: path
          required: true
          schema:
            type: string
        - name: ids
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
          description: Repeatable message ID query parameter
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    type: string
                - type: object
                  properties:
                    ids:
                      type: array
                      items:
                        type: string
                  required:
                    - ids
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordMessage'
        '400':
          description: Invalid ids or malformed body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Guild or channel not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
  /api/v1/guild/{guild_id}/channel/{channel_id}/messages/batch/reactions:
    post:
      tags:
        - guilds
        - channels
        - messages
        - reactions
      summary: Get reactions for a batch of messages (per-message grouping)
      description: 'Returns a mapping of message IDs to their reactions arrays. Each reactions array contains

        objects with the emoji (custom emoji mention format or unicode) and the count for that message.

        Missing / inaccessible messages are silently omitted. Duplicate message IDs are de-duplicated.

        '
      parameters:
        - name: guild_id
          in: path
          required: true
          schema:
            type: string
        - name: channel_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              description: Array of message IDs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    $ref: '#/components/schemas/DiscordMessageReaction'
        '400':
          description: Invalid ids or malformed body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Guild or channel not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
  /api/v1/guild/{guild_id}/emojis:
    get:
      description: Returns all custom emojis for the specified guild.
      security:
        - X-API-TOKEN: []
        - X-TACOBOT-TOKEN: []
      tags:
        - guilds
        - emojis
      summary: Get the list of emojis for a guild
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordEmoji'
        '400':
          description: Invalid guild id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Guild not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      parameters:
        - in: path
          required: true
          name: guild_id
          description: The ID of the guild to retrieve emojis from.
          schema:
            type: string
  /api/v1/guild/{guild_id}/emoji/id/{emoji_id}:
    get:
      parameters:
        - in: path
          required: true
          name: guild_id
          description: The ID of the guild to retrieve the emoji from.
          schema:
            type: string
        - in: path
          required: true
          name: emoji_id
          description: The ID of the emoji to retrieve.
          schema:
            type: string
      description: Returns a single emoji object for the given emoji ID.
      security:
        - X-API-TOKEN: []
        - X-TACOBOT-TOKEN: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordEmoji'
        '400':
          description: Invalid guild or emoji id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Guild or Emoji not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      tags:
        - guilds
        - emojis
      summary: Get an emoji by ID
  /api/v1/guild/{guild_id}/emoji/name/{emoji_name}:
    get:
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordEmoji'
        '400':
          description: Invalid guild id or emoji name missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Guild or Emoji not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      summary: Get an emoji by name
      security:
        - X-API-TOKEN: []
        - X-TACOBOT-TOKEN: []
      description: Returns a single emoji object for the given emoji name.
      tags:
        - guilds
        - emojis
      parameters:
        - in: path
          required: true
          name: guild_id
          description: The ID of the guild to retrieve the emoji from.
          schema:
            type: string
        - in: path
          required: true
          name: emoji_name
          description: The name of the emoji to retrieve.
          schema:
            type: string
  /api/v1/guild/{guild_id}/emojis/ids/batch:
    post:
      description: Fetch multiple emojis by their IDs in a single request.
      security:
        - X-API-TOKEN: []
        - X-TACOBOT-TOKEN: []
      tags:
        - guilds
        - emojis
      requestBody:
        description: List of emoji IDs to fetch.
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    type: string
                - $ref: '#/components/schemas/GuildItemIdBatchRequestBody'
      summary: Batch fetch emojis by IDs
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordEmoji'
        '400':
          description: Invalid guild id or request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Guild not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      parameters:
        - in: path
          required: true
          name: guild_id
          description: The ID of the guild to retrieve emojis from.
          schema:
            type: string
  /api/v1/guild/{guild_id}/emojis/names/batch:
    post:
      description: Fetch multiple emojis by their names in a single request.
      security:
        - X-API-TOKEN: []
        - X-TACOBOT-TOKEN: []
      tags:
        - guilds
        - emojis
      requestBody:
        description: List of emoji names to fetch.
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    type: string
                - $ref: '#/components/schemas/GuildItemNameBatchRequestBody'
      summary: Batch fetch emojis by names
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordEmoji'
        '400':
          description: Invalid guild id or request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Guild not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      parameters:
        - in: path
          required: true
          name: guild_id
          description: The ID of the guild to retrieve emojis from.
          schema:
            type: string
  /api/v1/guild/{guild_id}/roles:
    get:
      tags:
        - guilds
        - roles
      summary: List guild roles
      parameters:
        - name: guild_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordRole'
        '404':
          description: Guild not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
  /api/v1/guild/{guild_id}/roles/batch/ids:
    post:
      tags:
        - guilds
        - roles
      summary: Batch fetch roles by IDs
      parameters:
        - name: guild_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    type: string
                - type: object
                  properties:
                    ids:
                      type: array
                      items:
                        type: string
                  required:
                    - ids
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordRole'
        '404':
          description: Guild not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
  /api/v1/guild/{guild_id}/join-whitelist:
    get:
      tags:
        - guilds
        - whitelist
      summary: List all join whitelist entries
      description: Returns the complete join whitelist for the guild. For large lists, prefer the paginated endpoint.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JoinWhitelistUser'
        '400':
          description: Invalid guild id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
    post:
      tags:
        - guilds
        - whitelist
      summary: Add (upsert) a user to join whitelist
      description: 'Provide JSON body: { "user_id": "<id>", "added_by": "<id>" }


        The "added_by" field is optional and defaults to the same value as "user_id" when omitted.

        '
      parameters:
        - name: guild_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                added_by:
                  type: string
              required:
                - user_id
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JoinWhitelistUser'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
  /api/v1/guild/{guild_id}/join-whitelist/page:
    get:
      tags:
        - guilds
        - whitelist
      summary: List paginated join whitelist entries
      description: Returns a page of join whitelist entries. Accepts query params skip (default 0) and take (default 50, max 200).
      parameters:
        - name: guild_id
          in: path
          required: true
          schema:
            type: string
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: take
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 50
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults'
        '400':
          description: Invalid pagination parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
  /api/v1/guild/{guild_id}/join-whitelist/{user_id}:
    put:
      tags:
        - guilds
        - whitelist
      summary: Update (re-add) a join whitelist entry
      description: "Upserts a specific user.\n\nOptional body example:\n  { \"added_by\": \"<id>\" }\n"
      parameters:
        - name: guild_id
          in: path
          required: true
          schema:
            type: string
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                added_by:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JoinWhitelistUser'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
    delete:
      tags:
        - guilds
        - whitelist
      summary: Delete a join whitelist entry
      description: Removes a user from the whitelist.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema:
            type: string
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content (deleted)
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
  /api/v1/guild/{guild_id}/mentionables/batch/ids:
    post:
      tags:
        - guilds
        - mentionables
      summary: Batch fetch mentionables (roles or users) by IDs
      description: Returns role and/or user payloads for provided IDs. Accepts array or object with ids property.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    type: string
                - type: object
                  properties:
                    ids:
                      type: array
                      items:
                        type: string
                  required:
                    - ids
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordMentionable'
        '404':
          description: Guild not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
  /api/v1/guild/{guild_id}/mentionables:
    get:
      tags:
        - guilds
        - mentionables
      summary: List guild mentionables (roles + members)
      description: Returns all roles and members for the specified guild as mentionable union objects.
      parameters:
        - name: guild_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscordMentionable'
        '400':
          description: Missing or invalid guild id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Guild not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
  /api/v1/minecraft/whitelist.json:
    get:
      tags:
        - minecraft
      summary: Get the whitelist JSON
      description: 'Gets JSON formatted whitelist configuration

        '
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MinecraftWhiteListUser'
  /api/v1/minecraft/ops.json:
    get:
      tags:
        - minecraft
      summary: Get the ops list JSON
      description: 'Gets JSON formatted OPS configuration

        '
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MinecraftOpUser'
  /api/v1/minecraft/uuid/{username}:
    get:
      tags:
        - minecraft
      summary: Get userid from username
      description: 'Gets JSON payload of userid from username

        '
      parameters:
        - name: username
          description: Minecraft username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinecraftUser'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
  /api/v1/minecraft/status:
    get:
      tags:
        - minecraft
      summary: Get the server status information
      description: 'Gets information on the server.

        '
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinecraftServerStatus'
  /api/v1/minecraft/version:
    get:
      tags:
        - minecraft
      summary: Get the minecraft server version information
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TacoMinecraftServerSettings'
    post:
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
      tags:
        - minecraft
      summary: Set the minecraft server version information
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TacoMinecraftServerSettings'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TacoMinecraftServerSettings'
  /api/v1/minecraft/player/{user}/stats:
    get:
      parameters:
        - name: user
          description: The users minecraft username
          in: path
          required: true
          schema:
            type: string
      tags:
        - minecraft
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinecraftDiscordUserStatsInfo'
    post:
      parameters:
        - name: user
          description: The users minecraft uuid
          in: path
          required: true
          schema:
            type: string
      tags:
        - minecraft
      responses:
        '200':
          description: Successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinecraftUserStatsPayload'
  /api/v1/minecraft/player/{username}/stats/{world}:
    parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      - name: world
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TacoMinecraftWorlds'
    get:
      tags:
        - minecraft
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinecraftDiscordUserStatsInfo'
  /api/v1/minecraft/world:
    get:
      tags:
        - minecraft
      summary: Get the active minecraft server world information
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TacoMinecraftWorldInfo'
    post:
      tags:
        - minecraft
      summary: Set the active minecraft server world
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                guild_id:
                  type: string
                  description: Discord Guild ID
                world:
                  $ref: '#/components/schemas/TacoMinecraftWorlds'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TacoMinecraftWorldInfo'
  /api/v1/minecraft/worlds:
    get:
      tags:
        - minecraft
      summary: Get the active minecraft server world information
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TacoMinecraftWorldInfo'
  /tacobot/guild/{guild}/invite/{channel}:
    post:
      security:
        - X-AUTH-TOKEN: []
      tags:
        - twitch
      summary: Invite Bot to twitch channel
      description: ''
      parameters:
        - name: guild
          in: path
          description: The GUILD ID
          required: true
          schema:
            type: string
            format: ''
        - name: channel
          in: path
          description: The name of the twitch channel
          required: true
          schema:
            type: string
            format: ''
      responses:
        '200':
          description: Successful operation
  /api/v1/minecraft/player/events:
    get:
      tags:
        - minecraft
      summary: Get the minecraft player events
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MinecraftPlayerEvent'
  /api/v1/minecraft/player/event/{event}:
    get:
      tags:
        - minecraft
      summary: Get the minecraft player event
      parameters:
        - name: event
          in: path
          required: true
          description: The event type. Values can be pulled from the /tacobot/minecraft/player/events endpoint
          schema:
            type: string
            enum:
              - login
              - logout
              - death
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinecraftPlayerEventPayload'
  /api/v1/permissions/{guildId}/{userId}:
    get:
      description: List permissions for a user.
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
      tags:
        - permissions
      summary: Get user permissions
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      parameters:
        - in: path
          required: true
          name: guildId
          schema:
            type: string
          description: Discord guild ID
        - in: path
          required: true
          name: userId
          schema:
            type: string
          description: Discord user ID
  /api/v1/permissions/{guildId}/{userId}/{permission}:
    post:
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleStatusResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      summary: Add user permission
      description: Add a permission to a user.
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
      parameters:
        - in: path
          required: true
          name: guildId
          schema:
            type: string
          description: Discord guild ID
        - in: path
          required: true
          name: userId
          schema:
            type: string
          description: Discord user ID
        - in: path
          required: true
          name: permission
          schema:
            type: string
          description: Permission to add
      tags:
        - permissions
    put:
      summary: Add user permission
      parameters:
        - in: path
          required: true
          name: guildId
          schema:
            type: string
          description: Discord guild ID
        - in: path
          required: true
          name: userId
          schema:
            type: string
          description: Discord user ID
        - in: path
          required: true
          name: permission
          schema:
            type: string
          description: Permission to add
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
      tags:
        - permissions
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleStatusResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      description: Add (ensure) a permission for a user.
    delete:
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleStatusResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      summary: Delete user permission
      description: Delete (remove) a permission from a user.
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
      parameters:
        - in: path
          required: true
          name: guildId
          schema:
            type: string
          description: Discord guild ID
        - in: path
          required: true
          name: userId
          schema:
            type: string
          description: Discord user ID
        - in: path
          required: true
          name: permission
          schema:
            type: string
          description: Permission to remove
      tags:
        - permissions
  /webhook/minecraft/tacos/{action}:
    parameters:
      - name: action
        in: path
        required: true
        description: What action was taken
        schema:
          type: string
          enum:
            - login
            - custom
    post:
      security:
        - X-TACOBOT-TOKEN: []
      # tags:
      #   - webhook
      summary: Minecraft Webhook to give tacos to a user
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TacoWebhookMinecraftTacosPayload'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TacoWebhookMinecraftTacosResponsePayload'
    delete:
      security:
        - X-TACOBOT-TOKEN: []
      tags:
        - webhook
      summary: Minecraft Webhook to remove tacos from a user
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TacoWebhookMinecraftTacosPayload'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TacoWebhookMinecraftTacosResponsePayload'
  /webhook/minecraft/player/event:
    post:
      summary: Minecraft Webhook to send player events
      responses:
        '200':
          description: 'Success: Event processed successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinecraftPlayerEventPayloadResponse'
        '401':
          description: 'Unauthorized: Invalid webhook token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '400':
          description: 'Bad Request: No payload found in the request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: 'Not Found: Missing/invalid fields or unknown event'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '500':
          description: 'Internal Server Error: Unexpected processing failure'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
      description: Ingress point for Minecraft player events such as login, logout, and death.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MinecraftPlayerEventPayload'
      tags:
        - webhook
        - minecraft
  /webhook/game:
    post:
      description: Handle inbound free game webhook event.
      requestBody:
        required: true
        description: Payload describing the free game offer.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TacoWebhookGamePayload'
      summary: Submit Free Game Webhook
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TacoWebhookGamePayload'
        '400':
          description: Bad Request - Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized - Invalid Webhook Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      tags:
        - webhook
      security:
        - X-TACOBOT-TOKEN: []
        - X-AUTH-TOKEN: []
  /webhook/shift:
    post:
      description: Receive SHiFT code webhook payloads, validate, and broadcast to subscribed guild channels.
      tags:
        - webhook
        - shift-codes
      requestBody:
        required: true
        description: SHiFT code webhook payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShiftCodePayload'
      responses:
        '200':
          description: JSON echo of original payload or expiry message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftCodePayload'
        '400':
          description: Client error due to invalid/missing payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Client error due to invalid/missing payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '500':
          description: Client error due to invalid/missing payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      summary: Ingest SHiFT code webhook payloads
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
  /healthz:
    get:
      description: Gets the health status of the service
      tags:
        - health
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
      summary: Get the health status of the service
      parameters: []
  /health:
    get:
      description: Gets the health status of the service
      tags:
        - health
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
      summary: Get the health status of the service
      parameters: []
  /api/v1/settings/{section}:
    get:
      summary: Get settings for a guild and section
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Guild or Emoji not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      description: Retrieves the settings document for the primary guild and the specified section.
      parameters:
        - name: section
          in: path
          required: true
          schema:
            type: string
      tags:
        - settings
  /webhook/minecraft/tacos:
    post:
      responses:
        '200':
          description: Tacos successfully granted or removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TacoWebhookMinecraftTacosPayload'
        '400':
          description: Bad request due to validation or limit error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Bad request due to validation or limit error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Bad request due to validation or limit error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '500':
          description: Bad request due to validation or limit error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      tags:
        - webhook
        - minecraft
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
  /webhook/tacos:
    post:
      responses:
        '200':
          description: Tacos successfully granted or removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TacoWebhookMinecraftTacosPayload'
        '400':
          description: Bad request due to validation or limit error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Bad request due to validation or limit error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Bad request due to validation or limit error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '500':
          description: Bad request due to validation or limit error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      summary: Grant or revoke tacos between users via webhook
      tags:
        - webhook
        - tacos
      description: This endpoint allows for the granting or revocation of tacos between users through a webhook.
      security:
        - X-AUTH-TOKEN: []
        - X-TACOBOT-TOKEN: []
  /api/v1/guilds/lookup:
    get:
      description: Lookup a single guild by ID.
      summary: Guild Lookup
      security: &id004
        - X-API-TOKEN: []
        - X-TACOBOT-TOKEN: []
      responses:
        '200':
          description: Successful guild lookup
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordGuild'
        '400':
          description: Bad request (missing/invalid guild_id)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Guild not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      tags: &id005
        - guilds
      parameters: &id006
        - in: query
          name: id
          description: The ID of the guild to look up.
          required: false
          schema:
            type: string
    post:
      description: Lookup a single guild by ID.
      summary: Guild Lookup
      security: *id004
      responses:
        '200':
          description: Successful guild lookup
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscordGuild'
        '400':
          description: Bad request (missing/invalid guild_id)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        '404':
          description: Guild not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatusCodePayload'
      tags: *id005
      parameters: *id006
      requestBody:
        description: Request body for guild lookup by ID.
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - type: string
components:
  schemas:
    ErrorStatusCodePayload:
      type: object
      properties:
        error:
          type: string
          nullable: true
          description: Description of the error.
        message:
          type: string
          nullable: true
        code:
          type: integer
          nullable: true
          description: Error code.
        stacktrace:
          type: string
          nullable: true
      description: Error status code payload
      x-tacobot-managed: true
    ShiftCodeGame:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
      description: Represents a supported game for SHiFT codes.
      x-tacobot-managed: true
    ShiftCodePayload:
      type: object
      properties:
        games:
          type: array
          items:
            $ref: '#/components/schemas/ShiftCodeGame'
        code:
          type: string
        platforms:
          type: array
          items:
            type: string
        expiry:
          type: integer
          nullable: true
        reward:
          type: string
        notes:
          type: string
        source:
          type: string
        created_at:
          type: integer
      required:
        - code
        - created_at
        - games
        - notes
        - platforms
        - reward
        - source
      description: Payload for the SHiFT Code.
      x-tacobot-managed: true
    TacoWebhookMinecraftTacosResponsePayload:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the operation was successful.
        payload:
          $ref: '#/components/schemas/TacoWebhookMinecraftTacosPayload'
          description: The payload that was processed.
        total_tacos:
          type: integer
          description: The total number of tacos.
      required:
        - payload
        - success
        - total_tacos
      description: Represents a response payload for TacoWebhook Minecraft Tacos events.
      x-tacobot-managed: true
    TacoWebhookMinecraftTacosPayload:
      type: object
      properties:
        guild_id:
          type: string
          description: The ID of the guild where the tacos are being sent.
        from_user:
          type: string
          description: The user who is sending the tacos.
        to_user_id:
          type: string
          description: The ID of the user who is receiving the tacos.
        amount:
          type: integer
          description: The number of tacos being sent.
        reason:
          type: string
          description: The reason for sending the tacos.
        type:
          type: string
          enum:
            - login
            - custom
          description: The event type for giving the tacos to the user.
      required:
        - amount
        - from_user
        - guild_id
        - reason
        - to_user_id
        - type
      description: Payload that is sent to give a Minecraft user tacos.
      x-tacobot-managed: true
    TacoWebhookGamePayload:
      type: object
      properties:
        game_id:
          type: string
          description: The unique identifier for the game.
        end_date:
          type: integer
          nullable: true
          description: The end date of the game.
        worth:
          type: string
          nullable: true
          description: The worth of the game.
        open_giveaway_url:
          type: string
          description: The URL to open the giveaway.
        title:
          type: string
          description: The title of the game.
        thumbnail:
          type: string
          description: The thumbnail image URL of the game.
        image:
          type: string
          description: The main image URL of the game.
        description:
          type: string
          description: The description of the game.
        instructions:
          type: string
          nullable: true
          description: The instructions for the game.
        published_date:
          type: integer
          description: The published date of the game.
        type:
          type: string
          description: The type of the game.
        platforms:
          type: array
          items:
            type: string
          description: The platforms the game is available on.
        formatted_published_date:
          type: string
          nullable: true
          description: The formatted published date of the game.
        formatted_end_date:
          type: string
          nullable: true
          description: The formatted end date of the game.
      required:
        - description
        - game_id
        - image
        - open_giveaway_url
        - platforms
        - published_date
        - thumbnail
        - title
        - type
      description: Represents the payload for a Taco webhook game event.
      x-tacobot-managed: true
    TacoMinecraftWorldInfo:
      type: object
      properties:
        world:
          type: string
          enum:
            - taco_atm10
            - taco_atm10-2
            - taco_atm8
            - taco_atm9
          description: This is the world identifier
        name:
          type: string
          description: The display name of the world
        active:
          type: boolean
          description: Indicates if the world is the active world
        guild_id:
          type: string
          description: Discord Guild ID
      required:
        - active
        - guild_id
        - name
        - world
      description: Represents a Minecraft world managed by Taco.
      x-tacobot-managed: true
    MinecraftUserStats:
      type: object
      properties: {}
      description: Payload for Minecraft user statistics.
      x-tacobot-managed: true
    MinecraftPlayerEvent:
      type: object
      properties:
        event:
          type: string
          enum:
            - death
            - login
            - logout
            - unknown
          description: Type of player event (login, logout, death).
      required:
        - event
      description: Minecraft player event
      x-tacobot-managed: true
    MinecraftUser:
      type: object
      properties:
        uuid:
          type: string
          description: The unique identifier for the Minecraft user.
        username:
          type: string
          description: The username of the Minecraft user.
      required:
        - username
        - uuid
      description: Represents a Minecraft user with a unique ID.
      x-tacobot-managed: true
    MinecraftOpUser:
      type: object
      properties:
        uuid:
          type: string
          description: The unique identifier for the Minecraft user.
        username:
          type: string
          description: The username of the Minecraft user.
        level:
          type: integer
          description: The operator level (e.g., 4 for admin, 2 for operator).
        bypassPlayerLimit:
          type: boolean
      required:
        - bypassPlayerLimit
        - level
        - username
        - uuid
      description: Minecraft operator user.
      x-tacobot-managed: true
    MinecraftWhiteListUser:
      type: object
      properties:
        uuid:
          type: string
          description: The user's UUID.
        username:
          type: string
          description: The user's Minecraft username.
      required:
        - username
        - uuid
      description: A user on the Minecraft whitelist.
      x-tacobot-managed: true
    DiscordGuild:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        member_count:
          type: integer
          nullable: true
        icon:
          type: string
          nullable: true
        banner:
          type: string
          nullable: true
        owner_id:
          type: string
          nullable: true
        features:
          type: array
          items:
            type: string
          nullable: true
        description:
          type: string
          nullable: true
        vanity_url:
          type: string
          nullable: true
        vanity_url_code:
          type: string
          nullable: true
        preferred_locale:
          type: string
          nullable: true
        verification_level:
          type: string
          nullable: true
        boost_level:
          type: string
          nullable: true
        boost_count:
          type: integer
          nullable: true
      required:
        - id
        - name
      description: Discord guild (server) information
      x-tacobot-managed: true
    DiscordGuildChannels:
      type: object
      properties:
        id:
          type: string
          description: The guild ID
        name:
          type: string
          description: The guild name
        channels:
          type: array
          items:
            $ref: '#/components/schemas/DiscordChannel'
          nullable: true
          description: List of channels that are not under any category
        categories:
          type: array
          items:
            $ref: '#/components/schemas/DiscordCategory'
          nullable: true
          description: List of channel categories, each with its own channels
      required:
        - id
        - name
      description: Discord guild channels information
      x-tacobot-managed: true
    DiscordChannel:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        guild_id:
          type: string
          nullable: true
        position:
          type: integer
        topic:
          type: string
          nullable: true
        nsfw:
          type: boolean
        bitrate:
          type: integer
          nullable: true
        user_limit:
          type: integer
          nullable: true
        created_at:
          type: integer
          nullable: true
        category_id:
          type: string
          nullable: true
      required:
        - id
        - name
        - nsfw
        - position
        - type
      description: Discord channel information
      x-tacobot-managed: true
    DiscordCategory:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the category
        type:
          type: string
          enum:
            - category
          description: The type of the channel, always 'category' for categories
        guild_id:
          type: string
          description: The unique identifier for the guild this category belongs to
        name:
          type: string
          description: The name of the category
        position:
          type: integer
          description: The position of the category in the guild's channel list
        category_id:
          type: string
          description: The ID of the parent category, if any
        channels:
          type: array
          items:
            $ref: '#/components/schemas/DiscordChannel'
          description: List of channels under this category
      required:
        - category_id
        - channels
        - guild_id
        - id
        - name
        - position
        - type
      description: Discord category information
      x-tacobot-managed: true
    DiscordEmoji:
      type: object
      properties:
        type:
          type: string
          enum:
            - emoji
        id:
          type: string
        animated:
          type: boolean
        available:
          type: boolean
        created_at:
          type: integer
          nullable: true
        guild_id:
          type: string
          nullable: true
        managed:
          type: boolean
        require_colons:
          type: boolean
        name:
          type: string
        url:
          type: string
          nullable: true
      required:
        - animated
        - available
        - id
        - managed
        - name
        - require_colons
        - type
      description: Snapshot of a Discord emoji's core attributes.
      x-tacobot-managed: true
    DiscordRole:
      type: object
      properties:
        type:
          type: string
          enum:
            - role
        id:
          type: string
        guild_id:
          type: string
        color:
          type: integer
          nullable: true
        created_at:
          type: integer
          nullable: true
        display_icon:
          type: string
          nullable: true
        flags:
          type: integer
          nullable: true
        hoist:
          type: boolean
          nullable: true
        icon:
          type: string
          nullable: true
        managed:
          type: boolean
          nullable: true
        mention:
          type: string
        mentionable:
          type: boolean
        name:
          type: string
        permissions:
          type: integer
        position:
          type: integer
        secondary_color:
          type: integer
          nullable: true
        tertiary_color:
          type: integer
          nullable: true
        unicode_emoji:
          type: string
          nullable: true
      required:
        - guild_id
        - id
        - mention
        - mentionable
        - name
        - permissions
        - position
        - type
      description: Represents a Discord role with normalized primitive fields.
      x-tacobot-managed: true
    DiscordUser:
      type: object
      properties:
        type:
          type: string
          enum:
            - user
        id:
          type: string
        guild_id:
          type: string
        accent_color:
          type: integer
          nullable: true
        avatar:
          type: string
          nullable: true
        banner:
          type: string
          nullable: true
        bot:
          type: boolean
        color:
          type: integer
          nullable: true
        created_at:
          type: integer
          nullable: true
        default_avatar:
          type: string
          nullable: true
        discriminator:
          type: string
          nullable: true
        display_avatar:
          type: string
          nullable: true
        display_name:
          type: string
        global_name:
          type: string
        mention:
          type: string
        name:
          type: string
        status:
          type: string
          nullable: true
        system:
          type: boolean
        timestamp:
          type: integer
          nullable: true
        username:
          type: string
      required:
        - bot
        - display_name
        - global_name
        - guild_id
        - id
        - mention
        - name
        - system
        - type
        - username
      description: Discord user information
      x-tacobot-managed: true
    DiscordMentionable:
      oneOf:
        - $ref: '#/components/schemas/DiscordRole'
        - $ref: '#/components/schemas/DiscordUser'
      description: Represents a Discord mentionable entity.
      x-tacobot-managed: true
    DiscordMessage:
      type: object
      properties:
        type:
          type: string
          enum:
            - message
        id:
          type: string
        channel_id:
          type: string
        guild_id:
          type: string
        author_id:
          type: string
        content:
          type: string
        created_at:
          type: integer
        jump_url:
          type: string
          nullable: true
        edited_at:
          type: integer
        mention_everyone:
          type: boolean
        mentions:
          type: array
          items:
            type: object
          nullable: true
        attachments:
          type: array
          items:
            type: object
          nullable: true
        embeds:
          type: array
          items:
            type: object
          nullable: true
        reactions:
          type: array
          items:
            type: object
          nullable: true
        nonce:
          type: string
          nullable: true
        pinned:
          type: boolean
        message_type:
          type: integer
      required:
        - author_id
        - channel_id
        - content
        - created_at
        - edited_at
        - guild_id
        - id
        - mention_everyone
        - message_type
        - pinned
        - type
      description: Discord message information
      x-tacobot-managed: true
    DiscordMessageReaction:
      type: object
      properties:
        emoji:
          type: string
        count:
          type: integer
      required:
        - count
        - emoji
      description: Discord message reaction information
      x-tacobot-managed: true
    JoinWhitelistUser:
      type: object
      properties:
        guild_id:
          type: string
          description: Discord guild (server) identifier scoping the whitelist entry.
        user_id:
          type: string
          description: Discord user identifier for the whitelisted user.
        added_by:
          type: string
          nullable: true
          description: Discord user id (or system marker) of the actor who added the entry.
        timestamp:
          type: integer
          nullable: true
          description: Creation timestamp (seconds since epoch, or milliseconds depending on writer).
      required:
        - guild_id
        - user_id
      description: Container for a guild-scoped join whitelist record.
      x-tacobot-managed: true
    PagedResultsJoinWhitelistUser:
      allOf:
        - $ref: '#/components/schemas/PagedResults'
        - properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/JoinWhitelistUser'
          required:
            - items
      description: Generic paginated results container.
      x-tacobot-managed: true
    PagedResults:
      type: object
      properties:
        total:
          type: integer
          description: Total number of matching items (unpaged)
        skip:
          type: integer
          description: Number of items skipped (offset)
        take:
          type: integer
          description: Requested page size
        items:
          type: array
          items:
            type: object
          description: Page slice of items
      required:
        - items
        - skip
        - take
        - total
      description: Generic paginated results container.
      x-tacobot-managed: true
    MinecraftServerStatusMotd:
      type: object
      properties:
        plain:
          type: string
          description: The plain text version of the MOTD.
        html:
          type: string
          description: The HTML formatted version of the MOTD.
        raw:
          type: string
          description: The raw version of the MOTD with formatting codes.
        ansi:
          type: string
          description: The ANSI formatted version of the MOTD.
      required:
        - ansi
        - html
        - plain
        - raw
      description: Represents the message of the day (MOTD) information in a Minecraft server status response.
      x-tacobot-managed: true
    MinecraftServerStatusPlayers:
      type: object
      properties:
        online:
          type: integer
          description: Number of players currently online.
        max:
          type: integer
          description: Maximum player capacity of the server.
      required:
        - max
        - online
      description: Represents player count information in a Minecraft server status response.
      x-tacobot-managed: true
    MinecraftServerStatusVersion:
      type: object
      properties:
        name:
          type: string
          description: The version name of the Minecraft server.
        protocol:
          type: integer
          description: The protocol version number of the Minecraft server.
      required:
        - name
        - protocol
      description: Represents version information in a Minecraft server status response.
      x-tacobot-managed: true
    MinecraftDiscordUserStatsInfo:
      type: object
      properties:
        world:
          type: string
          enum:
            - taco_atm10
            - taco_atm10-2
            - taco_atm8
            - taco_atm9
          description: The name of the Minecraft world.
        username:
          type: string
          description: The Minecraft username.
        uuid:
          type: string
          description: The Minecraft UUID.
        user_id:
          type: string
          description: The Discord user ID associated with this Minecraft account.
        modified:
          type: integer
          description: Timestamp of the last modification to this record.
        stats:
          type: object
          nullable: true
          description: A dictionary of Minecraft stats.
      required:
        - modified
        - user_id
        - username
        - uuid
        - world
      description: Minecraft discord user stats info.
      x-tacobot-managed: true
    MinecraftPlayerEventPayload:
      type: object
      properties:
        user_id:
          type: string
          description: Discord user ID of the player.
        guild_id:
          type: string
          description: Discord guild ID associated with the event.
        payload:
          type: object
          nullable: true
          description: Additional event-specific data (varies by event type).
        event:
          type: string
          enum:
            - death
            - login
            - logout
            - unknown
          description: Type of player event (login, logout, death).
      required:
        - event
        - guild_id
        - user_id
      description: Minecraft player event payload
      x-tacobot-managed: true
    MinecraftServerSettings:
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether the Minecraft server integration is enabled.
        server:
          type: string
          description: The server address (IP or domain) and port.
        forge_version:
          type: string
          description: The version of the Forge mod loader used by the server.
        version:
          type: string
          description: The base version of the Minecraft server.
        help:
          type: string
          description: A link to provide help information on connecting to the server.
        mods:
          type: array
          items:
            $ref: '#/components/schemas/TacoMinecraftServerSettingsMod'
          description: A list of mods installed on the server.
      required:
        - enabled
        - forge_version
        - help
        - mods
        - server
        - version
      description: Minecraft server settings
      x-tacobot-managed: true
    MinecraftServerStatus:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the status query was successful.
        host:
          type: string
          description: The hostname or IP address of the Minecraft server.
        status:
          type: string
          enum:
            - offline
            - online
            - unknown
          description: The current status of the server (e.g., online, offline, unknown).
        description:
          type: string
          description: A brief description of the server.
        motd:
          $ref: '#/components/schemas/MinecraftServerStatusMotd'
          description: The message of the day (MOTD) information.
        online:
          type: boolean
          description: Whether the server is currently online.
        latency:
          type: integer
          description: The latency to the server in milliseconds.
        enforces_secure_chat:
          type: boolean
          description: Whether the server enforces secure chat.
        icon:
          type: string
          description: The base64-encoded server icon image.
        players:
          $ref: '#/components/schemas/MinecraftServerStatusPlayers'
          description: Player count information.
        version:
          $ref: '#/components/schemas/MinecraftServerStatusVersion'
          description: Version information of the server.
      required:
        - description
        - enforces_secure_chat
        - host
        - icon
        - latency
        - motd
        - online
        - players
        - status
        - success
        - version
      description: Represents the status of a Minecraft server.
      x-tacobot-managed: true
    TacoMinecraftServerSettings:
      type: object
      properties:
        guild_id:
          type: string
          description: The Discord guild ID associated with these settings.
        name:
          type: string
          description: The name of the Minecraft server configuration.
        settings:
          $ref: '#/components/schemas/MinecraftServerSettings'
          description: A dictionary containing various Minecraft server settings.
        timestamp:
          type: integer
          description: The last updated timestamp for these settings (epoch seconds).
      required:
        - guild_id
        - name
        - settings
        - timestamp
      description: Represents the settings for a Minecraft server managed by TacoBot.
      x-tacobot-managed: true
    TacoMinecraftServerSettingsMod:
      type: object
      properties:
        name:
          type: string
          description: The name of the mod.
        version:
          type: string
          description: The version of the mod.
      required:
        - name
        - version
      description: Represents a mod installed on the Minecraft server.
      x-tacobot-managed: true
    MinecraftUserStatsPayload:
      type: object
      properties:
        world_name:
          type: string
          enum:
            - taco_atm10
            - taco_atm10-2
            - taco_atm8
            - taco_atm9
          description: Enum identifying the Minecraft world
        stats:
          $ref: '#/components/schemas/MinecraftUserStats'
          description: Container of user stats for the specified world
      required:
        - stats
        - world_name
      description: Payload container for user stats by world.
      x-tacobot-managed: true
    TacoMinecraftWorlds:
      type: string
      enum:
        - taco_atm10
        - taco_atm10-2
        - taco_atm8
        - taco_atm9
      description: Represents a Minecraft world managed by TacoBot.
      default: taco_atm10-2
      x-tacobot-managed: true
    MinecraftPlayerEventPayloadResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - ok
        data:
          $ref: '#/components/schemas/MinecraftPlayerEventPayload'
      required:
        - data
        - status
      description: Response payload for Minecraft player event
      x-tacobot-managed: true
    GuildItemIdBatchRequestBody:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
      required:
        - ids
      description: Request body for batch fetching guild item by IDs
      x-tacobot-managed: true
    GuildItemNameBatchRequestBody:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
      required:
        - names
      description: Request body for batch fetching guild item by names
      x-tacobot-managed: true
    SimpleStatusResponse:
      type: object
      properties:
        status:
          type: string
      required:
        - status
      description: Simple status response with a status string
      x-tacobot-managed: true
  securitySchemes:
    X-AUTH-TOKEN:
      type: apiKey
      description: Authentication Token passed as header
      name: X-AUTH-TOKEN
      in: header
    X-TACOBOT-TOKEN:
      type: apiKey
      description: Authentication Token passed as header
      name: X-TACOBOT-TOKEN
      in: header
security:
  - X-AUTH-TOKEN: []
  - X-TACOBOT-TOKEN: []
